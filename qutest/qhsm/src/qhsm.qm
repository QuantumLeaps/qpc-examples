<?xml version="1.0" encoding="UTF-8"?>
<model version="7.0.1" links="1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.state-machine.com/qm/qm7.xsd">
 <documentation>QHsmTst is a contrived state machine for extensive testing
of QHsm-style state machines</documentation>
 <!--${qpc}-->
 <framework name="qpc"/>
 <!--${Shared}-->
 <package name="Shared" stereotype="0x02">
  <!--${Shared::TstSMSignals}-->
  <attribute name="TstSMSignals" type="enum" visibility="0x04" properties="0x00">
   <code>{
    A_SIG = Q_USER_SIG,
    B_SIG,
    C_SIG,
    D_SIG,
    E_SIG,
    F_SIG,
    G_SIG,
    H_SIG,
    I_SIG,
    MAX_SIG
};</code>
  </attribute>
  <!--${Shared::the_sm}-->
  <attribute name="the_sm" type="QAsm * const" visibility="0x00" properties="0x00">
   <documentation>opaque pointer to the test SM</documentation>
   <code>= &amp;TstSM_inst.super.super;</code>
  </attribute>
  <!--${Shared::BSP_display}-->
  <operation name="BSP_display" type="void" visibility="0x00" properties="0x00">
   <!--${Shared::BSP_display::msg}-->
   <parameter name="msg" type="char const *"/>
  </operation>
  <!--${Shared::BSP_terminate}-->
  <operation name="BSP_terminate" type="void" visibility="0x00" properties="0x00">
   <!--${Shared::BSP_terminate::result}-->
   <parameter name="result" type="int16_t const"/>
  </operation>
  <!--${Shared::TstSM_ctor}-->
  <operation name="TstSM_ctor" type="void" visibility="0x00" properties="0x00">
   <code>TstSM *me = &amp;TstSM_inst;
QHsm_ctor(&amp;me-&gt;super, Q_STATE_CAST(&amp;TstSM_initial));</code>
  </operation>
  <!--${Shared::TstSM_isIn}-->
  <operation name="TstSM_isIn" type="bool" visibility="0x00" properties="0x00">
   <!--${Shared::TstSM_isIn::state_num}-->
   <parameter name="state_num" type="uint32_t const"/>
   <code>QHsm * const me = &amp;TstSM_inst.super;
bool stat = false;
switch (state_num) {
case 0:
    stat = QASM_IS_IN(me, Q_STATE_CAST(&amp;TstSM_s));
    break;
case 1:
    stat = QASM_IS_IN(me, Q_STATE_CAST(&amp;TstSM_s1));
    break;
case 11:
    stat = QASM_IS_IN(me, Q_STATE_CAST(&amp;TstSM_s11));
    break;
case 111:
    stat = QASM_IS_IN(me, Q_STATE_CAST(&amp;TstSM_s111));
    break;
case 112:
    stat = QASM_IS_IN(me, Q_STATE_CAST(&amp;TstSM_s112));
    break;
case 12:
    stat = QASM_IS_IN(me, Q_STATE_CAST(&amp;TstSM_s12));
    break;
case 2:
    stat = QASM_IS_IN(me, Q_STATE_CAST(&amp;TstSM_s2));
    break;
case 21:
    stat = QASM_IS_IN(me, Q_STATE_CAST(&amp;TstSM_s21));
    break;
case 211:
    stat = QASM_IS_IN(me, Q_STATE_CAST(&amp;TstSM_s211));
    break;
case 212:
    stat = QASM_IS_IN(me, Q_STATE_CAST(&amp;TstSM_s212));
    break;
case 22:
    stat = QASM_IS_IN(me, Q_STATE_CAST(&amp;TstSM_s22));
    break;
default:
    Q_ERROR();
}
return stat;</code>
  </operation>
 </package>
 <!--${SMs}-->
 <package name="SMs" stereotype="0x02">
  <!--${SMs::TstSM}-->
  <class name="TstSM" superclass="qpc::QHsm">
   <documentation>Test active object</documentation>
   <!--${SMs::TstSM::foo}-->
   <attribute name="foo" type="uint8_t" visibility="0x02" properties="0x00"/>
   <!--${SMs::TstSM::inst}-->
   <attribute name="inst" type="TstSM" visibility="0x00" properties="0x01"/>
   <!--${SMs::TstSM::SM}-->
   <statechart properties="0x03">
    <!--${SMs::TstSM::SM::initial}-->
    <initial target="../1/6">
     <action brief="top-init">Q_UNUSED_PAR(par);
me-&gt;foo = 0U;
BSP_display(&quot;top-INIT;&quot;);

QS_SIG_DICTIONARY(A_SIG, (void *)0);
QS_SIG_DICTIONARY(B_SIG, (void *)0);
QS_SIG_DICTIONARY(C_SIG, (void *)0);
QS_SIG_DICTIONARY(D_SIG, (void *)0);
QS_SIG_DICTIONARY(E_SIG, (void *)0);
QS_SIG_DICTIONARY(F_SIG, (void *)0);
QS_SIG_DICTIONARY(G_SIG, (void *)0);
QS_SIG_DICTIONARY(H_SIG, (void *)0);
QS_SIG_DICTIONARY(I_SIG, (void *)0);</action>
     <initial_glyph conn="2,4,5,0,74,114,-22,2">
      <action box="1,-2,13,2"/>
     </initial_glyph>
    </initial>
    <!--${SMs::TstSM::SM::s}-->
    <state name="s">
     <entry brief="s-ENTRY">BSP_display(&quot;s-ENTRY;&quot;);</entry>
     <exit brief="s-EXIT">BSP_display(&quot;s-EXIT;&quot;);</exit>
     <!--${SMs::TstSM::SM::s::initial}-->
     <initial target="../5">
      <action brief="s-INIT">BSP_display(&quot;s-INIT;&quot;);</action>
      <initial_glyph conn="4,16,5,0,50,12">
       <action box="1,-2,11,2"/>
      </initial_glyph>
     </initial>
     <!--${SMs::TstSM::SM::s::history}-->
     <history type="shallow" target="../5">
      <history_glyph color="1" conn="72,26,1,0,-16,2"/>
     </history>
     <!--${SMs::TstSM::SM::s::E}-->
     <tran trig="E" target="../5/5">
      <action brief="s-E">BSP_display(&quot;s-E;&quot;);</action>
      <tran_glyph conn="2,23,3,1,68,33,-20">
       <action box="1,-2,10,2"/>
      </tran_glyph>
     </tran>
     <!--${SMs::TstSM::SM::s::I}-->
     <tran trig="I">
      <action brief="s-I">BSP_display(&quot;s-I;&quot;);</action>
      <tran_glyph conn="2,26,3,-1,20">
       <action box="1,-2,12,2"/>
      </tran_glyph>
     </tran>
     <!--${SMs::TstSM::SM::s::C}-->
     <tran trig="C" target="../../2">
      <action brief="s-C">BSP_display(&quot;s-C;&quot;);</action>
      <tran_glyph conn="2,20,3,3,72,-12,4">
       <action box="1,-2,13,2"/>
      </tran_glyph>
     </tran>
     <!--${SMs::TstSM::SM::s::s1}-->
     <state name="s1">
      <entry brief="s1-ENTRY">BSP_display(&quot;s1-ENTRY;&quot;);</entry>
      <exit brief="s1-EXIT">BSP_display(&quot;s1-EXIT;&quot;);</exit>
      <!--${SMs::TstSM::SM::s::s1::initial}-->
      <initial target="../5/5">
       <action brief="s1-INIT">BSP_display(&quot;s1-INIT;&quot;);</action>
       <initial_glyph conn="6,38,5,0,34,38">
        <action box="1,-2,12,2"/>
       </initial_glyph>
      </initial>
      <!--${SMs::TstSM::SM::s::s1::history}-->
      <history type="shallow" target="../5">
       <history_glyph conn="58,34,1,0,-14,16"/>
      </history>
      <!--${SMs::TstSM::SM::s::s1::E}-->
      <tran trig="E" target="../6">
       <action brief="s1-E">BSP_display(&quot;s1-E;&quot;);</action>
       <tran_glyph conn="4,41,3,1,52,69,-6">
        <action box="1,-2,12,2"/>
       </tran_glyph>
      </tran>
      <!--${SMs::TstSM::SM::s::s1::F}-->
      <tran trig="F" target="../../6/5">
       <action brief="s1-F">BSP_display(&quot;s1-F;&quot;);</action>
       <tran_glyph conn="4,44,3,1,62,102,-16">
        <action box="1,-2,15,2"/>
       </tran_glyph>
      </tran>
      <!--${SMs::TstSM::SM::s::s1::I}-->
      <tran trig="I">
       <!--${SMs::TstSM::SM::s::s1::I::[me->foo]}-->
       <choice>
        <guard>me-&gt;foo</guard>
        <action brief="s1-I">me-&gt;foo = 0U;
BSP_display(&quot;s1-I;&quot;);</action>
        <choice_glyph conn="16,47,5,-1,18">
         <action box="1,0,17,2"/>
        </choice_glyph>
       </choice>
       <tran_glyph conn="4,47,3,-1,12">
        <action box="1,-2,6,2"/>
       </tran_glyph>
      </tran>
      <!--${SMs::TstSM::SM::s::s1::s11}-->
      <state name="s11">
       <entry brief="s11-ENTRY">BSP_display(&quot;s11-ENTRY;&quot;);</entry>
       <exit brief="s11-EXIT">BSP_display(&quot;s11-EXIT;&quot;);</exit>
       <!--${SMs::TstSM::SM::s::s1::s11::initial}-->
       <initial target="../5">
        <action brief="s11-INIT">BSP_display(&quot;s11-INIT;&quot;);</action>
        <initial_glyph conn="8,60,5,0,34,16">
         <action box="1,-2,20,4"/>
        </initial_glyph>
       </initial>
       <!--${SMs::TstSM::SM::s::s1::s11::A}-->
       <tran trig="A" target="..">
        <action brief="s11-A">BSP_display(&quot;s11-A;&quot;);</action>
        <tran_glyph conn="6,63,3,1,46,-3,-2">
         <action box="1,-2,15,2"/>
        </tran_glyph>
       </tran>
       <!--${SMs::TstSM::SM::s::s1::s11::B}-->
       <tran trig="B" target="../5">
        <action brief="s11-B">BSP_display(&quot;s11-B;&quot;);</action>
        <tran_glyph conn="6,66,3,1,42,14,-2">
         <action box="1,-2,13,2"/>
        </tran_glyph>
       </tran>
       <!--${SMs::TstSM::SM::s::s1::s11::D}-->
       <tran trig="D">
        <!--${SMs::TstSM::SM::s::s1::s11::D::[!me->foo]}-->
        <choice target="../../..">
         <guard>!me-&gt;foo</guard>
         <action brief="s11-D;foo=1">me-&gt;foo = 1U;
BSP_display(&quot;s11-D;&quot;);</action>
         <choice_glyph conn="18,69,5,1,42,-2,-2">
          <action box="1,0,18,2"/>
         </choice_glyph>
        </choice>
        <tran_glyph conn="6,69,3,-1,12">
         <action box="1,-2,10,2"/>
        </tran_glyph>
       </tran>
       <!--${SMs::TstSM::SM::s::s1::s11::G}-->
       <tran trig="G" target="../../../6" cpref="../../../6/1">
        <action brief="s11-G-&gt;H*-s2">BSP_display(&quot;s11-G-&gt;H*-s2;&quot;);</action>
        <tran_glyph conn="6,73,3,1,56,53,-3">
         <action box="1,-2,20,2"/>
        </tran_glyph>
       </tran>
       <!--${SMs::TstSM::SM::s::s1::s11::s111}-->
       <state name="s111">
        <entry brief="s111-ENTRY">BSP_display(&quot;s111-ENTRY;&quot;);</entry>
        <exit brief="s111-EXIT">BSP_display(&quot;s111-EXIT;&quot;);</exit>
        <!--${SMs::TstSM::SM::s::s1::s11::s111::C}-->
        <tran trig="C" target="../../6">
         <action brief="s111-C">BSP_display(&quot;s111-C;&quot;);</action>
         <tran_glyph conn="8,86,3,1,40,8,-2">
          <action box="1,-2,13,2"/>
         </tran_glyph>
        </tran>
        <state_glyph color="1" node="8,76,38,12">
         <entry box="0,3,37,2"/>
         <exit box="0,5,37,2"/>
        </state_glyph>
       </state>
       <!--${SMs::TstSM::SM::s::s1::s11::s112}-->
       <state name="s112">
        <entry brief="s112-ENTRY">BSP_display(&quot;s112-ENTRY;&quot;);</entry>
        <exit brief="s112-EXIT">BSP_display(&quot;s112-EXIT;&quot;);</exit>
        <!--${SMs::TstSM::SM::s::s1::s11::s112::H}-->
        <tran trig="H" target="../../../..">
         <action brief="s112-H">BSP_display(&quot;s112-H;&quot;);</action>
         <tran_glyph conn="8,100,3,1,64">
          <action box="1,-2,14,2"/>
         </tran_glyph>
        </tran>
        <state_glyph color="1" node="8,90,38,12">
         <entry box="0,3,35,2"/>
         <exit box="0,5,35,2"/>
        </state_glyph>
       </state>
       <state_glyph color="2" node="6,50,44,54">
        <entry box="0,3,33,2"/>
        <exit box="0,5,33,2"/>
       </state_glyph>
      </state>
      <!--${SMs::TstSM::SM::s::s1::s12}-->
      <state name="s12">
       <entry brief="s12-ENTRY">BSP_display(&quot;s12-ENTRY;&quot;);</entry>
       <exit brief="s12-EXIT">BSP_display(&quot;s12-EXIT;&quot;);</exit>
       <state_glyph color="3" node="6,106,44,8">
        <entry box="0,3,21,2"/>
        <exit box="0,5,21,2"/>
       </state_glyph>
      </state>
      <state_glyph node="4,28,54,88">
       <entry box="0,3,39,2"/>
       <exit box="0,5,39,2"/>
      </state_glyph>
     </state>
     <!--${SMs::TstSM::SM::s::s2}-->
     <state name="s2">
      <entry brief="s2-ENTRY">BSP_display(&quot;s2-ENTRY;&quot;);</entry>
      <exit brief="s2-EXIT">BSP_display(&quot;s2-EXIT;&quot;);</exit>
      <!--${SMs::TstSM::SM::s::s2::initial}-->
      <initial target="../5/5">
       <action brief="s2-INIT">BSP_display(&quot;s2-INIT;&quot;);</action>
       <initial_glyph conn="6,130,5,0,34,38">
        <action box="1,-2,12,2"/>
       </initial_glyph>
      </initial>
      <!--${SMs::TstSM::SM::s::s2::history}-->
      <history type="deep" target="../5/5">
       <history_glyph color="1" conn="58,126,1,0,-14,42"/>
      </history>
      <!--${SMs::TstSM::SM::s::s2::E}-->
      <tran trig="E" target="../6">
       <action brief="s2-E">BSP_display(&quot;s2-E;&quot;);</action>
       <tran_glyph conn="4,133,3,1,52,68,-6">
        <action box="1,-2,12,2"/>
       </tran_glyph>
      </tran>
      <!--${SMs::TstSM::SM::s::s2::F}-->
      <tran trig="F" target="../../5/5">
       <action brief="s2-F">BSP_display(&quot;s2-F;&quot;);</action>
       <tran_glyph conn="4,136,3,1,60,-82,-14">
        <action box="1,-2,15,2"/>
       </tran_glyph>
      </tran>
      <!--${SMs::TstSM::SM::s::s2::I}-->
      <tran trig="I">
       <!--${SMs::TstSM::SM::s::s2::I::[me->foo]}-->
       <choice>
        <guard>me-&gt;foo</guard>
        <action brief="s2-I">me-&gt;foo = 0U;
BSP_display(&quot;s2-I;&quot;);</action>
        <choice_glyph conn="16,139,5,-1,18">
         <action box="1,0,17,2"/>
        </choice_glyph>
       </choice>
       <tran_glyph conn="4,139,3,-1,12">
        <action box="1,-2,6,2"/>
       </tran_glyph>
      </tran>
      <!--${SMs::TstSM::SM::s::s2::s21}-->
      <state name="s21">
       <entry brief="s21-ENTRY">BSP_display(&quot;s21-ENTRY;&quot;);</entry>
       <exit brief="s21-EXIT">BSP_display(&quot;s21-EXIT;&quot;);</exit>
       <!--${SMs::TstSM::SM::s::s2::s21::initial}-->
       <initial target="../5">
        <action brief="s21-INIT">BSP_display(&quot;s21-INIT;&quot;);</action>
        <initial_glyph conn="8,152,5,0,34,16">
         <action box="1,-2,20,4"/>
        </initial_glyph>
       </initial>
       <!--${SMs::TstSM::SM::s::s2::s21::A}-->
       <tran trig="A" target="..">
        <action brief="s21-A">BSP_display(&quot;s21-A;&quot;);</action>
        <tran_glyph conn="6,155,3,1,46,-3,-2">
         <action box="1,-2,15,2"/>
        </tran_glyph>
       </tran>
       <!--${SMs::TstSM::SM::s::s2::s21::B}-->
       <tran trig="B" target="../5">
        <action brief="s21-B">BSP_display(&quot;s21-B;&quot;);</action>
        <tran_glyph conn="6,158,3,1,42,15,-2">
         <action box="1,-2,13,2"/>
        </tran_glyph>
       </tran>
       <!--${SMs::TstSM::SM::s::s2::s21::D}-->
       <tran trig="D">
        <!--${SMs::TstSM::SM::s::s2::s21::D::[!me->foo]}-->
        <choice target="../../..">
         <guard>!me-&gt;foo</guard>
         <action brief="s21-D;foo=1">me-&gt;foo = 1U;
BSP_display(&quot;s21-D;&quot;);</action>
         <choice_glyph conn="18,161,5,1,42,-2,-2">
          <action box="1,0,18,2"/>
         </choice_glyph>
        </choice>
        <tran_glyph conn="6,161,3,-1,12">
         <action box="1,-2,10,2"/>
        </tran_glyph>
       </tran>
       <!--${SMs::TstSM::SM::s::s2::s21::G}-->
       <tran trig="G" target="../../../5" cpref="../../../5/1">
        <action brief="s21-G">BSP_display(&quot;s21-G-&gt;H*-s1;&quot;);</action>
        <tran_glyph conn="6,165,3,1,62,-131,-9">
         <action box="1,-2,14,2"/>
        </tran_glyph>
       </tran>
       <!--${SMs::TstSM::SM::s::s2::s21::s211}-->
       <state name="s211">
        <entry brief="s211-ENTRY">BSP_display(&quot;s211-ENTRY;&quot;);</entry>
        <exit brief="s211-EXIT">BSP_display(&quot;s211-EXIT;&quot;);</exit>
        <!--${SMs::TstSM::SM::s::s2::s21::s211::C}-->
        <tran trig="C" target="../../6">
         <action brief="s211-C">BSP_display(&quot;s211-C;&quot;);</action>
         <tran_glyph conn="8,178,3,1,40,8,-2">
          <action box="1,-2,13,2"/>
         </tran_glyph>
        </tran>
        <state_glyph color="1" node="8,168,38,12">
         <entry box="0,3,37,2"/>
         <exit box="0,5,37,2"/>
        </state_glyph>
       </state>
       <!--${SMs::TstSM::SM::s::s2::s21::s212}-->
       <state name="s212">
        <entry brief="s212-ENTRY">BSP_display(&quot;s212-ENTRY;&quot;);</entry>
        <exit brief="s212-EXIT">BSP_display(&quot;s212-EXIT;&quot;);</exit>
        <!--${SMs::TstSM::SM::s::s2::s21::s212::H}-->
        <tran trig="H" target="../../../..">
         <action brief="s212-H">BSP_display(&quot;s212-H;&quot;);</action>
         <tran_glyph conn="8,192,3,1,64">
          <action box="1,-2,14,2"/>
         </tran_glyph>
        </tran>
        <state_glyph color="1" node="8,182,38,12">
         <entry box="0,3,35,2"/>
         <exit box="0,5,35,2"/>
        </state_glyph>
       </state>
       <state_glyph color="2" node="6,142,44,54">
        <entry box="0,3,33,2"/>
        <exit box="0,5,33,2"/>
       </state_glyph>
      </state>
      <!--${SMs::TstSM::SM::s::s2::s22}-->
      <state name="s22">
       <entry brief="s22-ENTRY">BSP_display(&quot;s22-ENTRY;&quot;);</entry>
       <exit brief="s22-EXIT">BSP_display(&quot;s22-EXIT;&quot;);</exit>
       <state_glyph node="6,198,44,8">
        <entry box="0,3,21,2"/>
        <exit box="0,5,21,2"/>
       </state_glyph>
      </state>
      <state_glyph node="4,120,54,88">
       <entry box="0,3,39,2"/>
       <exit box="0,5,39,2"/>
      </state_glyph>
     </state>
     <state_glyph node="2,6,70,204">
      <entry box="0,3,32,2"/>
      <exit box="0,5,32,2"/>
     </state_glyph>
    </state>
    <!--${SMs::TstSM::SM::t}-->
    <state name="t">
     <entry brief="t-ENTRY">BSP_display(&quot;t-ENTRY;&quot;);</entry>
     <exit brief="t-EXIT">BSP_display(&quot;t-EXIT;&quot;);</exit>
     <!--${SMs::TstSM::SM::t::C}-->
     <tran trig="C" target="../../1" cpref="../../1/1">
      <action brief="t-C-&gt;H-s">BSP_display(&quot;t-C-&gt;H-s;&quot;);</action>
      <tran_glyph conn="78,14,3,1,14,12,-19">
       <action box="1,-2,13,2"/>
      </tran_glyph>
     </tran>
     <!--${SMs::TstSM::SM::t::E}-->
     <tran trig="E" target="../../1/6" cpref="../../1/6/1">
      <action brief="t-E-&gt;H*-s2">BSP_display(&quot;t-E-&gt;H*-s2;&quot;);</action>
      <tran_glyph conn="78,18,3,1,16,108,-35">
       <action box="1,-2,13,2"/>
      </tran_glyph>
     </tran>
     <state_glyph color="3" node="78,6,12,14">
      <entry box="0,3,11,2"/>
      <exit box="0,5,11,2"/>
     </state_glyph>
    </state>
    <state_diagram size="96,212"/>
   </statechart>
  </class>
 </package>
 <!--${.}-->
 <directory name=".">
  <!--${.::cut_qhsm.h}-->
  <file name="cut_qhsm.h">
   <text>#ifndef CUT_QHSM_H_
#define CUT_QHSM_H_

$declare ${Shared}

#endif // CUT_QHSM_H_</text>
  </file>
  <!--${.::cut_qhsm.c}-->
  <file name="cut_qhsm.c">
   <text>#include &quot;qpc.h&quot;          // QP/C framework
#include &quot;cut_qhsm.h&quot;     // Code Under Test (CUT)

Q_DEFINE_THIS_FILE

$declare ${SMs::TstSM}
$define ${Shared::the_sm}
$define ${Shared::TstSM_ctor}
$define ${Shared::TstSM_isIn}
$define ${SMs::TstSM}</text>
  </file>
 </directory>
</model>
