        -:    0:Source:../../../../include/qp.h
        -:    0:Graph:build/qep_hsm.gcno
        -:    0:Data:build/qep_hsm.gcda
        -:    0:Runs:6
        -:    1://$file${include::qp.h} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
        -:    2://
        -:    3:// Model: qpc.qm
        -:    4:// File:  ${include::qp.h}
        -:    5://
        -:    6:// This code has been generated by QM 7.0.0 <www.state-machine.com/qm>.
        -:    7:// DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
        -:    8://
        -:    9:// Copyright (c) General public
        -:   10:// SPDX-License-Identifier: LicenseRef-QL-commercial
        -:   11://
        -:   12:// This generated code is covered by the following QP license:
        -:   13:// License #    : LicenseRef-QL-dual
        -:   14:// Issued to    : General public
        -:   15:// Framework(s) : qpc
        -:   16:// Support ends : 2025-12-31
        -:   17:// License scope:
        -:   18://
        -:   19:// Copyright (C) 2005 Quantum Leaps, LLC. All rights reserved.
        -:   20://
        -:   21://                    Q u a n t u m  L e a P s
        -:   22://                    ------------------------
        -:   23://                    Modern Embedded Software
        -:   24://
        -:   25:// SPDX-License-Identifier: GPL-3.0-or-later OR LicenseRef-QL-commercial
        -:   26://
        -:   27:// The QP/C software is dual-licensed under the terms of the open-source GNU
        -:   28:// General Public License (GPL) or under the terms of one of the closed-
        -:   29:// source Quantum Leaps commercial licenses.
        -:   30://
        -:   31:// Redistributions in source code must retain this top-level comment block.
        -:   32:// Plagiarizing this software to sidestep the license obligations is illegal.
        -:   33://
        -:   34:// NOTE:
        -:   35:// The GPL (see <www.gnu.org/licenses/gpl-3.0>) does NOT permit the
        -:   36:// incorporation of the QP/C software into proprietary programs. Please
        -:   37:// contact Quantum Leaps for commercial licensing options, which expressly
        -:   38:// supersede the GPL and are designed explicitly for licensees interested
        -:   39:// in using QP/C in closed-source proprietary applications.
        -:   40://
        -:   41:// Quantum Leaps contact information:
        -:   42:// <www.state-machine.com/licensing>
        -:   43:// <info@state-machine.com>
        -:   44://
        -:   45://$endhead${include::qp.h} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        -:   46:#ifndef QP_H_
        -:   47:#define QP_H_
        -:   48:
        -:   49://============================================================================
        -:   50:#define QP_VERSION_STR "7.5.0-alpha"
        -:   51:#define QP_VERSION     750U
        -:   52:#define QP_RELEASE     0x7064FCF1U
        -:   53:
        -:   54://============================================================================
        -:   55://! @cond INTERNAL
        -:   56:
        -:   57:#ifndef Q_SIGNAL_SIZE
        -:   58:#define Q_SIGNAL_SIZE 2U
        -:   59:#endif
        -:   60:
        -:   61:#ifndef QF_MAX_ACTIVE
        -:   62:#define QF_MAX_ACTIVE 32U
        -:   63:#endif
        -:   64:
        -:   65:#if (QF_MAX_ACTIVE > 64U)
        -:   66:#error QF_MAX_ACTIVE exceeds the maximum of 64U;
        -:   67:#endif
        -:   68:
        -:   69:#ifndef QF_MAX_TICK_RATE
        -:   70:#define QF_MAX_TICK_RATE 1U
        -:   71:#endif
        -:   72:
        -:   73:#if (QF_MAX_TICK_RATE > 15U)
        -:   74:#error QF_MAX_TICK_RATE exceeds the maximum of 15U;
        -:   75:#endif
        -:   76:
        -:   77:#ifndef QF_MAX_EPOOL
        -:   78:#define QF_MAX_EPOOL 3U
        -:   79:#endif
        -:   80:
        -:   81:#if (QF_MAX_EPOOL > 15U)
        -:   82:#error QF_MAX_EPOOL exceeds the maximum of 15U;
        -:   83:#endif
        -:   84:
        -:   85:#ifndef QF_TIMEEVT_CTR_SIZE
        -:   86:#define QF_TIMEEVT_CTR_SIZE 4U
        -:   87:#endif
        -:   88:
        -:   89:#if (QF_TIMEEVT_CTR_SIZE > 4U)
        -:   90:#error QF_TIMEEVT_CTR_SIZE defined incorrectly, expected 1U, 2U, or 4U;
        -:   91:#endif
        -:   92:
        -:   93:#ifndef QF_EVENT_SIZ_SIZE
        -:   94:#define QF_EVENT_SIZ_SIZE 2U
        -:   95:#endif
        -:   96:
        -:   97:#if (QF_EVENT_SIZ_SIZE > 4U)
        -:   98:#error QF_EVENT_SIZ_SIZE defined incorrectly, expected 1U, 2U, or 4U;
        -:   99:#endif
        -:  100:
        -:  101://! @endcond
        -:  102://============================================================================
        -:  103:
        -:  104://$declare${glob-types} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
        -:  105:
        -:  106://${glob-types::int_t} .......................................................
        -:  107:typedef int int_t;
        -:  108:
        -:  109://${glob-types::enum_t} ......................................................
        -:  110:typedef int enum_t;
        -:  111:
        -:  112://${glob-types::float32_t} ...................................................
        -:  113:typedef float float32_t;
        -:  114:
        -:  115://${glob-types::float64_t} ...................................................
        -:  116:typedef double float64_t;
        -:  117://$enddecl${glob-types} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        -:  118:
        -:  119://$declare${QEP} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
        -:  120:
        -:  121://${QEP::QP_versionStr[16]} ..................................................
        -:  122://! the current QP version number string in ROM, based on #QP_VERSION_STR
        -:  123:extern char const QP_versionStr[16];
        -:  124:
        -:  125://${QEP::QSignal} ............................................................
        -:  126:#if (Q_SIGNAL_SIZE == 1U)
        -:  127:typedef uint8_t QSignal;
        -:  128:#endif //  (Q_SIGNAL_SIZE == 1U)
        -:  129:
        -:  130://${QEP::QSignal} ............................................................
        -:  131:#if (Q_SIGNAL_SIZE == 2U)
        -:  132:typedef uint16_t QSignal;
        -:  133:#endif //  (Q_SIGNAL_SIZE == 2U)
        -:  134:
        -:  135://${QEP::QSignal} ............................................................
        -:  136:#if (Q_SIGNAL_SIZE == 4U)
        -:  137:typedef uint32_t QSignal;
        -:  138:#endif //  (Q_SIGNAL_SIZE == 4U)
        -:  139:
        -:  140://${QEP::QEVT_MARKER} ........................................................
        -:  141:#define QEVT_MARKER 0xE0U
        -:  142:
        -:  143://${QEP::QEVT_DYNAMIC} .......................................................
        -:  144:#define QEVT_DYNAMIC 0U
        -:  145:
        -:  146://${QEP::QEvt} ...............................................................
        -:  147://! @class QEvt
        -:  148:typedef struct QEvt {
        -:  149:// public:
        -:  150:
        -:  151:    //! @public @memberof QEvt
        -:  152:    QSignal sig;
        -:  153:
        -:  154:// private:
        -:  155:
        -:  156:    //! @private @memberof QEvt
        -:  157:    uint8_t volatile refCtr_;
        -:  158:
        -:  159:    //! @private @memberof QEvt
        -:  160:    uint8_t evtTag_;
        -:  161:} QEvt;
        -:  162:
        -:  163:extern QEvt const QEvt_reserved_[4];
        -:  164:
        -:  165:// public:
        -:  166:
        -:  167://! @public @memberof QEvt
        -:  168:static inline void QEvt_ctor(QEvt * const me,
        -:  169:    enum_t const sig)
        -:  170:{
        -:  171:    me->sig     = (QSignal)sig;
        -:  172:    me->refCtr_ = 0U;
        -:  173:    me->evtTag_ = QEVT_MARKER;
        -:  174:}
        -:  175:
        -:  176://! @public @memberof QEvt
        -:  177:static inline QEvt * QEvt_init(QEvt * const me,
        -:  178:    uint8_t dummy)
        -:  179:{
        -:  180:    (void)dummy;
        -:  181:    return me;
        -:  182:}
        -:  183:
        -:  184:// private:
        -:  185:
        -:  186://! @private @memberof QEvt
       41:  187:static inline bool QEvt_verify_(QEvt const * const me) {
       41:  188:    return (me != (QEvt const *)0)
       41:  189:           && ((me->evtTag_ & 0xF0U) == QEVT_MARKER);
        -:  190:}
        -:  191:
        -:  192://! @private @memberof QEvt
        -:  193:static inline uint_fast8_t QEvt_getPoolNum_(QEvt const * const me) {
        -:  194:    return (uint_fast8_t)me->evtTag_ & 0x0FU;
        -:  195:}
        -:  196:
        -:  197://${QEP::QStateRet} ..........................................................
        -:  198://! All possible values returned from state/action handlers
        -:  199://! @note
        -:  200://! The order of enumeration matters for algorithmic correctness.
        -:  201:enum QStateRet {
        -:  202:    // unhandled and need to "bubble up"
        -:  203:    Q_RET_SUPER,     //!< event passed to superstate to handle
        -:  204:    Q_RET_UNHANDLED, //!< event unhandled due to guard
        -:  205:
        -:  206:    // handled and do not need to "bubble up"
        -:  207:    Q_RET_HANDLED,   //!< event handled (internal transition)
        -:  208:    Q_RET_IGNORED,   //!< event silently ignored (bubbled up to top)
        -:  209:
        -:  210:    // entry/exit
        -:  211:    Q_RET_ENTRY,     //!< state entry action executed
        -:  212:    Q_RET_EXIT,      //!< state exit  action executed
        -:  213:
        -:  214:    // no side effects
        -:  215:    Q_RET_NULL,      //!< return value without any effect
        -:  216:
        -:  217:    // transitions need to execute transition-action table in ::QMsm
        -:  218:    Q_RET_TRAN,      //!< regular transition
        -:  219:    Q_RET_TRAN_INIT, //!< initial transition in a state
        -:  220:
        -:  221:    // transitions that additionally clobber me->state
        -:  222:    Q_RET_TRAN_HIST, //!< transition to history of a given state
        -:  223:};
        -:  224:
        -:  225://${QEP::QState} .............................................................
        -:  226:typedef enum QStateRet QState;
        -:  227:
        -:  228://${QEP::QStateHandler} ......................................................
        -:  229:typedef QState (* QStateHandler )(void * const me, QEvt const * const e);
        -:  230:
        -:  231://${QEP::QActionHandler} .....................................................
        -:  232:typedef QState (* QActionHandler )(void * const me);
        -:  233:
        -:  234://${QEP::QXThread} ...........................................................
        -:  235:// forward declaration
        -:  236:struct QXThread;
        -:  237:
        -:  238://${QEP::QXThreadHandler} ....................................................
        -:  239:typedef void (* QXThreadHandler )(struct QXThread * const me);
        -:  240:
        -:  241://${QEP::QMState} ............................................................
        -:  242:typedef struct QMState {
        -:  243:    struct QMState const *superstate; //!< @private @memberof QMState
        -:  244:    QStateHandler const stateHandler; //!< @private @memberof QMState
        -:  245:    QActionHandler const entryAction; //!< @private @memberof QMState
        -:  246:    QActionHandler const exitAction;  //!< @private @memberof QMState
        -:  247:    QActionHandler const initAction;  //!< @private @memberof QMState
        -:  248:} QMState;
        -:  249:
        -:  250://${QEP::QMTranActTable} .....................................................
        -:  251:typedef struct QMTranActTable {
        -:  252:    QMState const *target;       //!< @private @memberof QMTranActTable
        -:  253:    QActionHandler const act[1]; //!< @private @memberof QMTranActTable
        -:  254:} QMTranActTable;
        -:  255:
        -:  256://${QEP::QReservedSig} .......................................................
        -:  257://! Reserved signals by the QHsm-style state machine implementation
        -:  258:enum QReservedSig {
        -:  259:    Q_EMPTY_SIG,     //!< signal to execute the default case
        -:  260:    Q_ENTRY_SIG,     //!< signal for coding entry actions
        -:  261:    Q_EXIT_SIG,      //!< signal for coding exit actions
        -:  262:    Q_INIT_SIG,      //!< signal for coding initial transitions
        -:  263:    Q_USER_SIG       //!< offset for the user signals (QP Application)
        -:  264:};
        -:  265:
        -:  266://${QEP::QAsmAttr} ...........................................................
        -:  267:union QAsmAttr {
        -:  268:    QStateHandler   fun;         //!< @private @memberof QAsmAttr
        -:  269:    QActionHandler  act;         //!< @private @memberof QAsmAttr
        -:  270:    QXThreadHandler thr;         //!< @private @memberof QAsmAttr
        -:  271:    QMTranActTable const *tatbl; //!< @private @memberof QAsmAttr
        -:  272:    struct QMState const *obj;   //!< @private @memberof QAsmAttr
        -:  273:#ifndef Q_UNSAFE
        -:  274:    uintptr_t      uint;         //!< @private @memberof QAsmAttr
        -:  275:#endif
        -:  276:};
        -:  277:
        -:  278://${QEP::QAsm} ...............................................................
        -:  279://! @class QAsm
        -:  280:typedef struct {
        -:  281:// private:
        -:  282:
        -:  283:    //! @protected @memberof QAsm
        -:  284:    struct QAsmVtable const * vptr;
        -:  285:
        -:  286:// protected:
        -:  287:
        -:  288:    //! @protected @memberof QAsm
        -:  289:    union QAsmAttr state;
        -:  290:
        -:  291:    //! @protected @memberof QAsm
        -:  292:    union QAsmAttr temp;
        -:  293:} QAsm;
        -:  294:
        -:  295:// protected:
        -:  296:
        -:  297://! @protected @memberof QAsm
        -:  298:void QAsm_ctor(QAsm * const me);
        -:  299:
        -:  300://${QEP::QAsmVtable} .........................................................
        -:  301:struct QAsmVtable {
        -:  302:    void (*init)(QAsm * const me, void const * const e,
        -:  303:                 uint_fast8_t const qsId);
        -:  304:    void (*dispatch)(QAsm * const me, QEvt const * const e,
        -:  305:                     uint_fast8_t const qsId);
        -:  306:    bool (*isIn)(QAsm * const me, QStateHandler const s);
        -:  307:
        -:  308:#ifdef Q_SPY
        -:  309:    QStateHandler (*getStateHandler)(QAsm * const me);
        -:  310:#endif // Q_SPY
        -:  311:};
        -:  312:
        -:  313://${QEP::QHsm} ...............................................................
        -:  314://! @class QHsm
        -:  315://! @extends QAsm
        -:  316:typedef struct {
        -:  317:// protected:
        -:  318:    QAsm super;
        -:  319:} QHsm;
        -:  320:
        -:  321:// protected:
        -:  322:
        -:  323://! @protected @memberof QHsm
        -:  324:void QHsm_ctor(QHsm * const me,
        -:  325:    QStateHandler const initial);
        -:  326:
        -:  327:// private:
        -:  328:
        -:  329://! @private @memberof QHsm
        -:  330:void QHsm_init_(
        -:  331:    QAsm * const me,
        -:  332:    void const * const e,
        -:  333:    uint_fast8_t const qsId);
        -:  334:
        -:  335://! @private @memberof QHsm
        -:  336:void QHsm_dispatch_(
        -:  337:    QAsm * const me,
        -:  338:    QEvt const * const e,
        -:  339:    uint_fast8_t const qsId);
        -:  340:
        -:  341:#ifdef Q_SPY
        -:  342://! @private @memberof QHsm
        -:  343:QStateHandler QHsm_getStateHandler_(QAsm * const me);
        -:  344:#endif // def Q_SPY
        -:  345:
        -:  346:// public:
        -:  347:
        -:  348://! @private @memberof QHsm
        -:  349:bool QHsm_isIn_(
        -:  350:    QAsm * const me,
        -:  351:    QStateHandler const state);
        -:  352:
        -:  353://! @public @memberof QHsm
        -:  354:static inline QStateHandler QHsm_state(QHsm const * const me) {
        -:  355:    return me->super.state.fun;
        -:  356:}
        -:  357:
        -:  358://! @public @memberof QHsm
        -:  359:QStateHandler QHsm_childState(QHsm * const me,
        -:  360:    QStateHandler const parent);
        -:  361:
        -:  362:// private:
        -:  363:
        -:  364://! @private @memberof QHsm
        -:  365:int_fast8_t QHsm_tran_(
        -:  366:    QAsm * const me,
        -:  367:    QStateHandler * const path,
        -:  368:    uint_fast8_t const qsId);
        -:  369:
        -:  370:// protected:
        -:  371:
        -:  372://! @protected @memberof QAsm
        -:  373:QState QHsm_top(QHsm const * const me,
        -:  374:    QEvt const * const e);
        -:  375:
        -:  376://${QEP::QMsm} ...............................................................
        -:  377://! @class QMsm
        -:  378://! @extends QAsm
        -:  379:typedef struct {
        -:  380:// protected:
        -:  381:    QAsm super;
        -:  382:} QMsm;
        -:  383:
        -:  384:// protected:
        -:  385:
        -:  386://! @protected @memberof QMsm
        -:  387:void QMsm_ctor(QMsm * const me,
        -:  388:    QStateHandler const initial);
        -:  389:
        -:  390:// public:
        -:  391:
        -:  392://! @private @memberof QMsm
        -:  393:void QMsm_init_(
        -:  394:    QAsm * const me,
        -:  395:    void const * const e,
        -:  396:    uint_fast8_t const qsId);
        -:  397:
        -:  398:// private:
        -:  399:
        -:  400://! @private @memberof QMsm
        -:  401:void QMsm_dispatch_(
        -:  402:    QAsm * const me,
        -:  403:    QEvt const * const e,
        -:  404:    uint_fast8_t const qsId);
        -:  405:
        -:  406:// public:
        -:  407:
        -:  408:#ifdef Q_SPY
        -:  409://! @public @memberof QMsm
        -:  410:static inline QStateHandler QMsm_getStateHandler_(QAsm * const me) {
        -:  411:    return me->state.obj->stateHandler;
        -:  412:}
        -:  413:#endif // def Q_SPY
        -:  414:
        -:  415://! @private @memberof QMsm
        -:  416:bool QMsm_isIn_(
        -:  417:    QAsm * const me,
        -:  418:    QStateHandler const state);
        -:  419:
        -:  420://! @public @memberof QMsm
        -:  421:static inline QMState const * QMsm_stateObj(QMsm const * const me) {
        -:  422:    return me->super.state.obj;
        -:  423:}
        -:  424:
        -:  425://! @public @memberof QMsm
        -:  426:QMState const * QMsm_childStateObj(QMsm const * const me,
        -:  427:    QMState const * const parent);
        -:  428:
        -:  429:// private:
        -:  430:
        -:  431://! @private @memberof QMsm
        -:  432:QState QMsm_execTatbl_(
        -:  433:    QAsm * const me,
        -:  434:    QMTranActTable const * const tatbl,
        -:  435:    uint_fast8_t const qsId);
        -:  436:
        -:  437://! @private @memberof QMsm
        -:  438:void QMsm_exitToTranSource_(
        -:  439:    QAsm * const me,
        -:  440:    QMState const * const cs,
        -:  441:    QMState const * const ts,
        -:  442:    uint_fast8_t const qsId);
        -:  443:
        -:  444://! @private @memberof QMsm
        -:  445:QState QMsm_enterHistory_(
        -:  446:    QAsm * const me,
        -:  447:    QMState const *const hist,
        -:  448:    uint_fast8_t const qsId);
        -:  449://$enddecl${QEP} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        -:  450:
        -:  451://$declare${QEP-macros} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
        -:  452:
        -:  453://${QEP-macros::QEVT_INITIALIZER} ............................................
        -:  454:#define QEVT_INITIALIZER(sig_) { (QSignal)(sig_), 0U, QEVT_MARKER }
        -:  455:
        -:  456://${QEP-macros::QASM_INIT} ...................................................
        -:  457:#ifdef Q_SPY
        -:  458:#define QASM_INIT(me_, par_, qsId_) do { \
        -:  459:    Q_ASSERT(((QAsm *)(me_))->vptr); \
        -:  460:    (*((QAsm *)(me_))->vptr->init)((QAsm *)(me_), (par_), (qsId_)); \
        -:  461:} while (false)
        -:  462:#endif // def Q_SPY
        -:  463:
        -:  464://${QEP-macros::QASM_INIT} ...................................................
        -:  465:#ifndef Q_SPY
        -:  466:#define QASM_INIT(me_, par_, dummy) do { \
        -:  467:    Q_ASSERT(((QAsm *)(me_))->vptr); \
        -:  468:    (*((QAsm *)(me_))->vptr->init)((QAsm *)(me_), (par_), 0); \
        -:  469:} while (false)
        -:  470:#endif // ndef Q_SPY
        -:  471:
        -:  472://${QEP-macros::QASM_DISPATCH} ...............................................
        -:  473:#ifdef Q_SPY
        -:  474:#define QASM_DISPATCH(me_, e_, qsId_) \
        -:  475:    (*((QAsm *)(me_))->vptr->dispatch)((QAsm *)(me_), (e_), (qsId_))
        -:  476:#endif // def Q_SPY
        -:  477:
        -:  478://${QEP-macros::QASM_DISPATCH} ...............................................
        -:  479:#ifndef Q_SPY
        -:  480:#define QASM_DISPATCH(me_, e_, dummy) \
        -:  481:    (*((QAsm *)(me_))->vptr->dispatch)((QAsm *)(me_), (e_), 0U)
        -:  482:#endif // ndef Q_SPY
        -:  483:
        -:  484://${QEP-macros::QASM_IS_IN} ..................................................
        -:  485:#define QASM_IS_IN(me_, state_) \
        -:  486:    (*((QAsm *)(me_))->vptr->isIn)((QAsm *)(me_), (state_))
        -:  487:
        -:  488://${QEP-macros::Q_ASM_UPCAST} ................................................
        -:  489:#define Q_ASM_UPCAST(ptr_) ((QAsm *)(ptr_))
        -:  490:
        -:  491://${QEP-macros::Q_HSM_UPCAST} ................................................
        -:  492:#define Q_HSM_UPCAST(ptr_) ((QHsm *)(ptr_))
        -:  493:
        -:  494://${QEP-macros::Q_MSM_UPCAST} ................................................
        -:  495:#define Q_MSM_UPCAST(ptr_) ((QMsm *)(ptr_))
        -:  496:
        -:  497://${QEP-macros::Q_TRAN} ......................................................
        -:  498:#define Q_TRAN(target_) \
        -:  499:    ((Q_ASM_UPCAST(me))->temp.fun = Q_STATE_CAST(target_), \
        -:  500:     (QState)Q_RET_TRAN)
        -:  501:
        -:  502://${QEP-macros::Q_TRAN_HIST} .................................................
        -:  503:#define Q_TRAN_HIST(hist_) \
        -:  504:    ((Q_ASM_UPCAST(me))->temp.fun = (hist_), \
        -:  505:     (QState)Q_RET_TRAN_HIST)
        -:  506:
        -:  507://${QEP-macros::Q_SUPER} .....................................................
        -:  508:#define Q_SUPER(super_) \
        -:  509:    ((Q_ASM_UPCAST(me))->temp.fun = Q_STATE_CAST(super_), \
        -:  510:     (QState)Q_RET_SUPER)
        -:  511:
        -:  512://${QEP-macros::Q_HANDLED} ...................................................
        -:  513:#define Q_HANDLED() ((QState)Q_RET_HANDLED)
        -:  514:
        -:  515://${QEP-macros::Q_UNHANDLED} .................................................
        -:  516:#define Q_UNHANDLED() ((QState)Q_RET_UNHANDLED)
        -:  517:
        -:  518://${QEP-macros::Q_ACTION_NULL} ...............................................
        -:  519:#define Q_ACTION_NULL ((QActionHandler)0)
        -:  520:
        -:  521://${QEP-macros::Q_EVT_CAST} ..................................................
        -:  522:#define Q_EVT_CAST(class_) ((class_ const *)(e))
        -:  523:
        -:  524://${QEP-macros::Q_STATE_CAST} ................................................
        -:  525:#define Q_STATE_CAST(handler_) ((QStateHandler)(handler_))
        -:  526:
        -:  527://${QEP-macros::Q_ACTION_CAST} ...............................................
        -:  528:#define Q_ACTION_CAST(action_) ((QActionHandler)(action_))
        -:  529:
        -:  530://${QEP-macros::Q_UNUSED_PAR} ................................................
        -:  531:#define Q_UNUSED_PAR(par_) ((void)(par_))
        -:  532:
        -:  533://${QEP-macros::Q_DIM} .......................................................
        -:  534:#define Q_DIM(array_) (sizeof(array_) / sizeof((array_)[0U]))
        -:  535:
        -:  536://${QEP-macros::Q_UINT2PTR_CAST} .............................................
        -:  537:#define Q_UINT2PTR_CAST(type_, uint_) ((type_ *)(uint_))
        -:  538:
        -:  539://${QEP-macros::QM_ENTRY} ....................................................
        -:  540:#ifdef Q_SPY
        -:  541:#define QM_ENTRY(state_) \
        -:  542:    ((Q_ASM_UPCAST(me))->temp.obj = (state_), \
        -:  543:     (QState)Q_RET_ENTRY)
        -:  544:#endif // def Q_SPY
        -:  545:
        -:  546://${QEP-macros::QM_ENTRY} ....................................................
        -:  547:#ifndef Q_SPY
        -:  548:#define QM_ENTRY(dummy) ((QState)Q_RET_ENTRY)
        -:  549:#endif // ndef Q_SPY
        -:  550:
        -:  551://${QEP-macros::QM_EXIT} .....................................................
        -:  552:#ifdef Q_SPY
        -:  553:#define QM_EXIT(state_) \
        -:  554:    ((Q_ASM_UPCAST(me))->temp.obj = (state_), \
        -:  555:     (QState)Q_RET_EXIT)
        -:  556:#endif // def Q_SPY
        -:  557:
        -:  558://${QEP-macros::QM_EXIT} .....................................................
        -:  559:#ifndef Q_SPY
        -:  560:#define QM_EXIT(dummy) ((QState)Q_RET_EXIT)
        -:  561:#endif // ndef Q_SPY
        -:  562:
        -:  563://${QEP-macros::QM_SM_EXIT} ..................................................
        -:  564:#define QM_SM_EXIT(state_) \
        -:  565:    ((Q_ASM_UPCAST(me))->temp.obj = (state_), \
        -:  566:     (QState)Q_RET_EXIT)
        -:  567:
        -:  568://${QEP-macros::QM_TRAN} .....................................................
        -:  569:#define QM_TRAN(tatbl_) ((Q_ASM_UPCAST(me))->temp.tatbl \
        -:  570:    = (struct QMTranActTable const *)(tatbl_), \
        -:  571: (QState)Q_RET_TRAN)
        -:  572:
        -:  573://${QEP-macros::QM_TRAN_INIT} ................................................
        -:  574:#define QM_TRAN_INIT(tatbl_) ((Q_ASM_UPCAST(me))->temp.tatbl \
        -:  575:    = (struct QMTranActTable const *)(tatbl_), \
        -:  576: (QState)Q_RET_TRAN_INIT)
        -:  577:
        -:  578://${QEP-macros::QM_TRAN_HIST} ................................................
        -:  579:#define QM_TRAN_HIST(history_, tatbl_) \
        -:  580:    ((((Q_ASM_UPCAST(me))->state.obj  = (history_)), \
        -:  581:      ((Q_ASM_UPCAST(me))->temp.tatbl = \
        -:  582:          (struct QMTranActTable const *)(tatbl_))), \
        -:  583:     (QState)Q_RET_TRAN_HIST)
        -:  584:
        -:  585://${QEP-macros::QM_HANDLED} ..................................................
        -:  586:#define QM_HANDLED() ((QState)Q_RET_HANDLED)
        -:  587:
        -:  588://${QEP-macros::QM_UNHANDLED} ................................................
        -:  589:#define QM_UNHANDLED() ((QState)Q_RET_UNHANDLED)
        -:  590:
        -:  591://${QEP-macros::QM_SUPER} ....................................................
        -:  592:#define QM_SUPER() ((QState)Q_RET_SUPER)
        -:  593:
        -:  594://${QEP-macros::QM_STATE_NULL} ...............................................
        -:  595:#define QM_STATE_NULL ((QMState *)0)
        -:  596://$enddecl${QEP-macros} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        -:  597:
        -:  598://$declare${QF::types} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
        -:  599:
        -:  600://${QF::types::QPrioSpec} ....................................................
        -:  601:typedef uint16_t QPrioSpec;
        -:  602:
        -:  603://${QF::types::QTimeEvtCtr} ..................................................
        -:  604:#if (QF_TIMEEVT_CTR_SIZE == 1U)
        -:  605:typedef uint8_t QTimeEvtCtr;
        -:  606:#endif //  (QF_TIMEEVT_CTR_SIZE == 1U)
        -:  607:
        -:  608://${QF::types::QTimeEvtCtr} ..................................................
        -:  609:#if (QF_TIMEEVT_CTR_SIZE == 2U)
        -:  610:typedef uint16_t QTimeEvtCtr;
        -:  611:#endif //  (QF_TIMEEVT_CTR_SIZE == 2U)
        -:  612:
        -:  613://${QF::types::QTimeEvtCtr} ..................................................
        -:  614:#if (QF_TIMEEVT_CTR_SIZE == 4U)
        -:  615:typedef uint32_t QTimeEvtCtr;
        -:  616:#endif //  (QF_TIMEEVT_CTR_SIZE == 4U)
        -:  617:
        -:  618://${QF::types::QPSetBits} ....................................................
        -:  619:#if (QF_MAX_ACTIVE <= 8U)
        -:  620:typedef uint8_t QPSetBits;
        -:  621:#endif //  (QF_MAX_ACTIVE <= 8U)
        -:  622:
        -:  623://${QF::types::QPSetBits} ....................................................
        -:  624:#if (8U < QF_MAX_ACTIVE) && (QF_MAX_ACTIVE <= 16U)
        -:  625:typedef uint16_t QPSetBits;
        -:  626:#endif //  (8U < QF_MAX_ACTIVE) && (QF_MAX_ACTIVE <= 16U)
        -:  627:
        -:  628://${QF::types::QPSetBits} ....................................................
        -:  629:#if (16U < QF_MAX_ACTIVE)
        -:  630:typedef uint32_t QPSetBits;
        -:  631:#endif //  (16U < QF_MAX_ACTIVE)
        -:  632:
        -:  633://${QF::types::QF_LOG2} ......................................................
        -:  634:#ifndef QF_LOG2
        -:  635:uint_fast8_t QF_LOG2(QPSetBits const bitmask);
        -:  636:#endif // ndef QF_LOG2
        -:  637:
        -:  638://${QF::types::QPSet} ........................................................
        -:  639://! @class QPSet
        -:  640:typedef struct {
        -:  641:// private:
        -:  642:
        -:  643:    //! @private @memberof QPSet
        -:  644:    QPSetBits bits[((QF_MAX_ACTIVE + (8U*sizeof(QPSetBits))) - 1U)/(8U*sizeof(QPSetBits))];
        -:  645:} QPSet;
        -:  646:
        -:  647:// public:
        -:  648:
        -:  649://! @public @memberof QPSet
        -:  650:static inline void QPSet_setEmpty(QPSet * const me) {
        -:  651:    me->bits[0] = 0U;
        -:  652:    #if (QF_MAX_ACTIVE > 32)
        -:  653:    me->bits[1] = 0U;
        -:  654:    #endif
        -:  655:}
        -:  656:
        -:  657://! @public @memberof QPSet
        -:  658:static inline bool QPSet_isEmpty(QPSet const * const me) {
        -:  659:    #if (QF_MAX_ACTIVE <= 32U)
        -:  660:    return (me->bits[0] == 0U);
        -:  661:    #else
        -:  662:    return (me->bits[0] == 0U) ? (me->bits[1] == 0U) : false;
        -:  663:    #endif
        -:  664:}
        -:  665:
        -:  666://! @public @memberof QPSet
        -:  667:static inline bool QPSet_notEmpty(QPSet const * const me) {
        -:  668:    #if (QF_MAX_ACTIVE <= 32U)
        -:  669:    return (me->bits[0] != 0U);
        -:  670:    #else
        -:  671:    return (me->bits[0] != 0U) ? true : (me->bits[1] != 0U);
        -:  672:    #endif
        -:  673:}
        -:  674:
        -:  675://! @public @memberof QPSet
        -:  676:static inline bool QPSet_hasElement(QPSet const * const me,
        -:  677:    uint_fast8_t const n)
        -:  678:{
        -:  679:    #if (QF_MAX_ACTIVE <= 32U)
        -:  680:    return (me->bits[0] & ((QPSetBits)1U << (n - 1U))) != 0U;
        -:  681:    #else
        -:  682:    return (n <= 32U)
        -:  683:        ? ((me->bits[0] & ((QPSetBits)1U << (n - 1U)))  != 0U)
        -:  684:        : ((me->bits[1] & ((QPSetBits)1U << (n - 33U))) != 0U);
        -:  685:    #endif
        -:  686:}
        -:  687:
        -:  688://! @public @memberof QPSet
        -:  689:static inline void QPSet_insert(QPSet * const me,
        -:  690:    uint_fast8_t const n)
        -:  691:{
        -:  692:    #if (QF_MAX_ACTIVE <= 32U)
        -:  693:    me->bits[0] = (me->bits[0] | ((QPSetBits)1U << (n - 1U)));
        -:  694:    #else
        -:  695:    if (n <= 32U) {
        -:  696:        me->bits[0] = (me->bits[0] | ((QPSetBits)1U << (n - 1U)));
        -:  697:    }
        -:  698:    else {
        -:  699:        me->bits[1] = (me->bits[1] | ((QPSetBits)1U << (n - 33U)));
        -:  700:    }
        -:  701:    #endif
        -:  702:}
        -:  703:
        -:  704://! @public @memberof QPSet
        -:  705:static inline void QPSet_remove(QPSet * const me,
        -:  706:    uint_fast8_t const n)
        -:  707:{
        -:  708:    #if (QF_MAX_ACTIVE <= 32U)
        -:  709:    me->bits[0] = (me->bits[0] & (QPSetBits)(~((QPSetBits)1U << (n - 1U))));
        -:  710:    #else
        -:  711:    if (n <= 32U) {
        -:  712:        (me->bits[0] = (me->bits[0] & ~((QPSetBits)1U << (n - 1U))));
        -:  713:    }
        -:  714:    else {
        -:  715:        (me->bits[1] = (me->bits[1] & ~((QPSetBits)1U << (n - 33U))));
        -:  716:    }
        -:  717:    #endif
        -:  718:}
        -:  719:
        -:  720://! @public @memberof QPSet
        -:  721:static inline uint_fast8_t QPSet_findMax(QPSet const * const me) {
        -:  722:    #if (QF_MAX_ACTIVE <= 32U)
        -:  723:    return QF_LOG2(me->bits[0]);
        -:  724:    #else
        -:  725:    return (me->bits[1] != 0U)
        -:  726:        ? (QF_LOG2(me->bits[1]) + 32U)
        -:  727:        : (QF_LOG2(me->bits[0]));
        -:  728:    #endif
        -:  729:}
        -:  730:
        -:  731:// private:
        -:  732:
        -:  733:#ifndef Q_UNSAFE
        -:  734://! @private @memberof QPSet
        -:  735:static inline void QPSet_update_(QPSet const * const me,
        -:  736:    QPSet * const dis)
        -:  737:{
        -:  738:    dis->bits[0] = ~me->bits[0];
        -:  739:    #if (QF_MAX_ACTIVE > 32U)
        -:  740:    dis->bits[1] = ~me->bits[1];
        -:  741:    #endif
        -:  742:}
        -:  743:#endif // ndef Q_UNSAFE
        -:  744:
        -:  745:#ifndef Q_UNSAFE
        -:  746://! @private @memberof QPSet
        -:  747:static inline bool QPSet_verify_(QPSet const * const me,
        -:  748:    QPSet const * const dis)
        -:  749:{
        -:  750:    #if (QF_MAX_ACTIVE <= 32U)
        -:  751:    return me->bits[0] == (QPSetBits)(~dis->bits[0]);
        -:  752:    #else
        -:  753:    return (me->bits[0] == (QPSetBits)(~dis->bits[0]))
        -:  754:           && (me->bits[1] == (QPSetBits)(~dis->bits[1]));
        -:  755:    #endif
        -:  756:}
        -:  757:#endif // ndef Q_UNSAFE
        -:  758:
        -:  759://${QF::types::QSubscrList} ..................................................
        -:  760:// @struct QSubscrList
        -:  761:typedef struct {
        -:  762:// private:
        -:  763:
        -:  764:    //! @private @memberof QSubscrList
        -:  765:    QPSet set;
        -:  766:
        -:  767:#ifndef Q_UNSAFE
        -:  768:    //! @private @memberof QSubscrList
        -:  769:    QPSet set_dis;
        -:  770:#endif // ndef Q_UNSAFE
        -:  771:} QSubscrList;
        -:  772:
        -:  773://${QF::types::QEQueue} ......................................................
        -:  774:struct QEQueue;
        -:  775://$enddecl${QF::types} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        -:  776:
        -:  777://$declare${QF::QActive} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
        -:  778:
        -:  779://${QF::QActive} .............................................................
        -:  780://! @class QActive
        -:  781://! @extends QAsm
        -:  782:typedef struct QActive {
        -:  783:// protected:
        -:  784:    QAsm super;
        -:  785:
        -:  786:    //! @protected @memberof QActive
        -:  787:    uint8_t prio;
        -:  788:
        -:  789:    //! @protected @memberof QActive
        -:  790:    uint8_t pthre;
        -:  791:
        -:  792:#ifdef QACTIVE_THREAD_TYPE
        -:  793:    //! @protected @memberof QActive
        -:  794:    QACTIVE_THREAD_TYPE thread;
        -:  795:#endif // def QACTIVE_THREAD_TYPE
        -:  796:
        -:  797:#ifdef QACTIVE_OS_OBJ_TYPE
        -:  798:    //! @protected @memberof QActive
        -:  799:    QACTIVE_OS_OBJ_TYPE osObject;
        -:  800:#endif // def QACTIVE_OS_OBJ_TYPE
        -:  801:
        -:  802:#ifdef QACTIVE_EQUEUE_TYPE
        -:  803:    //! @protected @memberof QActive
        -:  804:    QACTIVE_EQUEUE_TYPE eQueue;
        -:  805:#endif // def QACTIVE_EQUEUE_TYPE
        -:  806:
        -:  807:#ifndef Q_UNSAFE
        -:  808:    //! @protected @memberof QActive
        -:  809:    uint8_t prio_dis;
        -:  810:#endif // ndef Q_UNSAFE
        -:  811:
        -:  812:#ifndef Q_UNSAFE
        -:  813:    //! @protected @memberof QActive
        -:  814:    uint8_t pthre_dis;
        -:  815:#endif // ndef Q_UNSAFE
        -:  816:
        -:  817:// private:
        -:  818:} QActive;
        -:  819:
        -:  820://! @static @private @memberof QActive
        -:  821:extern QActive * QActive_registry_[QF_MAX_ACTIVE + 1U];
        -:  822:
        -:  823://! @static @private @memberof QActive
        -:  824:extern QSubscrList * QActive_subscrList_;
        -:  825:
        -:  826://! @static @private @memberof QActive
        -:  827:extern enum_t QActive_maxPubSignal_;
        -:  828:
        -:  829:// protected:
        -:  830:
        -:  831://! @protected @memberof QActive
        -:  832:void QActive_ctor(QActive * const me,
        -:  833:    QStateHandler const initial);
        -:  834:
        -:  835:// public:
        -:  836:
        -:  837://! @public @memberof QActive
        -:  838:void QActive_setAttr(QActive * const me,
        -:  839:    uint32_t attr1,
        -:  840:    void const * attr2);
        -:  841:
        -:  842://! @public @memberof QActive
        -:  843:void QActive_start(QActive * const me,
        -:  844:    QPrioSpec const prioSpec,
        -:  845:    QEvt const * * const qSto,
        -:  846:    uint_fast16_t const qLen,
        -:  847:    void * const stkSto,
        -:  848:    uint_fast16_t const stkSize,
        -:  849:    void const * const par);
        -:  850:
        -:  851:// protected:
        -:  852:
        -:  853:#ifdef QACTIVE_CAN_STOP
        -:  854://! @protected @memberof QActive
        -:  855:void QActive_stop(QActive * const me);
        -:  856:#endif // def QACTIVE_CAN_STOP
        -:  857:
        -:  858:// private:
        -:  859:
        -:  860://! @private @memberof QActive
        -:  861:void QActive_register_(QActive * const me);
        -:  862:
        -:  863://! @private @memberof QActive
        -:  864:void QActive_unregister_(QActive * const me);
        -:  865:
        -:  866://! @private @memberof QActive
        -:  867:bool QActive_post_(QActive * const me,
        -:  868:    QEvt const * const e,
        -:  869:    uint_fast16_t const margin,
        -:  870:    void const * const sender);
        -:  871:
        -:  872://! @private @memberof QActive
        -:  873:void QActive_postLIFO_(QActive * const me,
        -:  874:    QEvt const * const e);
        -:  875:
        -:  876://! @private @memberof QActive
        -:  877:QEvt const * QActive_get_(QActive * const me);
        -:  878:
        -:  879:// public:
        -:  880:
        -:  881://! @static @public @memberof QActive
        -:  882:void QActive_psInit(
        -:  883:    QSubscrList * const subscrSto,
        -:  884:    enum_t const maxSignal);
        -:  885:
        -:  886:// private:
        -:  887:
        -:  888://! @static @private @memberof QActive
        -:  889:void QActive_publish_(
        -:  890:    QEvt const * const e,
        -:  891:    void const * const sender,
        -:  892:    uint_fast8_t const qsId);
        -:  893:
        -:  894:// protected:
        -:  895:
        -:  896://! @protected @memberof QActive
        -:  897:void QActive_subscribe(QActive const * const me,
        -:  898:    enum_t const sig);
        -:  899:
        -:  900://! @protected @memberof QActive
        -:  901:void QActive_unsubscribe(QActive const * const me,
        -:  902:    enum_t const sig);
        -:  903:
        -:  904://! @protected @memberof QActive
        -:  905:void QActive_unsubscribeAll(QActive const * const me);
        -:  906:
        -:  907://! @protected @memberof QActive
        -:  908:bool QActive_defer(QActive const * const me,
        -:  909:    struct QEQueue * const eq,
        -:  910:    QEvt const * const e);
        -:  911:
        -:  912://! @protected @memberof QActive
        -:  913:bool QActive_recall(QActive * const me,
        -:  914:    struct QEQueue * const eq);
        -:  915:
        -:  916://! @protected @memberof QActive
        -:  917:uint_fast16_t QActive_flushDeferred(QActive const * const me,
        -:  918:    struct QEQueue * const eq,
        -:  919:    uint_fast16_t const num);
        -:  920:
        -:  921:// private:
        -:  922:
        -:  923://! @private @memberof QActive
        -:  924:void QActive_evtLoop_(QActive * const me);
        -:  925://$enddecl${QF::QActive} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        -:  926:
        -:  927://$declare${QF::QMActive} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
        -:  928:
        -:  929://${QF::QMActive} ............................................................
        -:  930://! @class QMActive
        -:  931://! @extends QActive
        -:  932:typedef struct {
        -:  933:// protected:
        -:  934:    QActive super;
        -:  935:} QMActive;
        -:  936:
        -:  937:// protected:
        -:  938:
        -:  939://! @protected @memberof QMActive
        -:  940:void QMActive_ctor(QMActive * const me,
        -:  941:    QStateHandler const initial);
        -:  942://$enddecl${QF::QMActive} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        -:  943:
        -:  944://$declare${QF::QTimeEvt} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
        -:  945:
        -:  946://${QF::QTimeEvt} ............................................................
        -:  947://! @class QTimeEvt
        -:  948://! @extends QEvt
        -:  949:typedef struct QTimeEvt {
        -:  950:// protected:
        -:  951:    QEvt super;
        -:  952:
        -:  953:// private:
        -:  954:
        -:  955:    //! @private @memberof QTimeEvt
        -:  956:    struct QTimeEvt * volatile next;
        -:  957:
        -:  958:    //! @private @memberof QTimeEvt
        -:  959:    void * volatile act;
        -:  960:
        -:  961:    //! @private @memberof QTimeEvt
        -:  962:    QTimeEvtCtr volatile ctr;
        -:  963:
        -:  964:    //! @private @memberof QTimeEvt
        -:  965:    QTimeEvtCtr interval;
        -:  966:} QTimeEvt;
        -:  967:
        -:  968://! @static @private @memberof QTimeEvt
        -:  969:extern QTimeEvt QTimeEvt_timeEvtHead_[QF_MAX_TICK_RATE];
        -:  970:
        -:  971:// public:
        -:  972:
        -:  973://! @public @memberof QTimeEvt
        -:  974:void QTimeEvt_ctorX(QTimeEvt * const me,
        -:  975:    QActive * const act,
        -:  976:    enum_t const sig,
        -:  977:    uint_fast8_t const tickRate);
        -:  978:
        -:  979://! @public @memberof QTimeEvt
        -:  980:void QTimeEvt_armX(QTimeEvt * const me,
        -:  981:    QTimeEvtCtr const nTicks,
        -:  982:    QTimeEvtCtr const interval);
        -:  983:
        -:  984://! @public @memberof QTimeEvt
        -:  985:bool QTimeEvt_disarm(QTimeEvt * const me);
        -:  986:
        -:  987://! @public @memberof QTimeEvt
        -:  988:bool QTimeEvt_rearm(QTimeEvt * const me,
        -:  989:    QTimeEvtCtr const nTicks);
        -:  990:
        -:  991://! @public @memberof QTimeEvt
        -:  992:bool QTimeEvt_wasDisarmed(QTimeEvt * const me);
        -:  993:
        -:  994://! @public @memberof QTimeEvt
        -:  995:QTimeEvtCtr QTimeEvt_currCtr(QTimeEvt const * const me);
        -:  996:
        -:  997://! @static @private @memberof QTimeEvt
        -:  998:void QTimeEvt_tick_(
        -:  999:    uint_fast8_t const tickRate,
        -: 1000:    void const * const sender);
        -: 1001:
        -: 1002:// private:
        -: 1003:
        -: 1004:#ifdef Q_UTEST
        -: 1005://! @static @private @memberof QTimeEvt
        -: 1006:void QTimeEvt_tick1_(
        -: 1007:    uint_fast8_t const tickRate,
        -: 1008:    void const * const sender);
        -: 1009:#endif // def Q_UTEST
        -: 1010:
        -: 1011:// public:
        -: 1012:
        -: 1013://! @static @public @memberof QTimeEvt
        -: 1014:bool QTimeEvt_noActive(uint_fast8_t const tickRate);
        -: 1015://$enddecl${QF::QTimeEvt} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        -: 1016:
        -: 1017://$declare${QF::QTicker} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
        -: 1018:
        -: 1019://${QF::QTicker} .............................................................
        -: 1020://! @class QTicker
        -: 1021://! @extends QActive
        -: 1022:typedef struct {
        -: 1023:// protected:
        -: 1024:    QActive super;
        -: 1025:} QTicker;
        -: 1026:
        -: 1027:// public:
        -: 1028:
        -: 1029://! @public @memberof QTicker
        -: 1030:void QTicker_ctor(QTicker * const me,
        -: 1031:    uint_fast8_t const tickRate);
        -: 1032:
        -: 1033:// private:
        -: 1034:
        -: 1035://! @private @memberof QTicker
        -: 1036:void QTicker_init_(
        -: 1037:    QAsm * const me,
        -: 1038:    void const * const par,
        -: 1039:    uint_fast8_t const qsId);
        -: 1040:
        -: 1041://! @private @memberof QTicker
        -: 1042:void QTicker_dispatch_(
        -: 1043:    QAsm * const me,
        -: 1044:    QEvt const * const e,
        -: 1045:    uint_fast8_t const qsId);
        -: 1046:
        -: 1047://! @private @memberof QTicker
        -: 1048:void QTicker_trig_(
        -: 1049:    QActive * const me,
        -: 1050:    void const * const sender);
        -: 1051://$enddecl${QF::QTicker} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        -: 1052:
        -: 1053://$declare${QF::QF-base} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
        -: 1054:
        -: 1055://${QF::QF-base::init} .......................................................
        -: 1056://! @static @public @memberof QF
        -: 1057:void QF_init(void);
        -: 1058:
        -: 1059://${QF::QF-base::stop} .......................................................
        -: 1060://! @static @public @memberof QF
        -: 1061:void QF_stop(void);
        -: 1062:
        -: 1063://${QF::QF-base::run} ........................................................
        -: 1064://! @static @public @memberof QF
        -: 1065:int_t QF_run(void);
        -: 1066:
        -: 1067://${QF::QF-base::getQueueMin} ................................................
        -: 1068://! @static @public @memberof QF
        -: 1069:uint_fast16_t QF_getQueueMin(uint_fast8_t const prio);
        -: 1070:
        -: 1071://${QF::QF-base::onStartup} ..................................................
        -: 1072://! @static @public @memberof QF
        -: 1073:void QF_onStartup(void);
        -: 1074:
        -: 1075://${QF::QF-base::onCleanup} ..................................................
        -: 1076://! @static @public @memberof QF
        -: 1077:void QF_onCleanup(void);
        -: 1078:
        -: 1079://${QF::QF-base::onContextSw} ................................................
        -: 1080:#ifdef QF_ON_CONTEXT_SW
        -: 1081://! @static @public @memberof QF
        -: 1082:void QF_onContextSw(
        -: 1083:    QActive * prev,
        -: 1084:    QActive * next);
        -: 1085:#endif // def QF_ON_CONTEXT_SW
        -: 1086://$enddecl${QF::QF-base} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        -: 1087:
        -: 1088://$declare${QF::QF-dyn} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
        -: 1089:
        -: 1090://${QF::QF-dyn::poolInit} ....................................................
        -: 1091://! @static @public @memberof QF
        -: 1092:void QF_poolInit(
        -: 1093:    void * const poolSto,
        -: 1094:    uint_fast32_t const poolSize,
        -: 1095:    uint_fast16_t const evtSize);
        -: 1096:
        -: 1097://${QF::QF-dyn::poolGetMaxBlockSize} .........................................
        -: 1098://! @static @public @memberof QF
        -: 1099:uint_fast16_t QF_poolGetMaxBlockSize(void);
        -: 1100:
        -: 1101://${QF::QF-dyn::getPoolMin} ..................................................
        -: 1102://! @static @public @memberof QF
        -: 1103:uint_fast16_t QF_getPoolMin(uint_fast8_t const poolNum);
        -: 1104:
        -: 1105://${QF::QF-dyn::newX_} .......................................................
        -: 1106://! @static @private @memberof QF
        -: 1107:QEvt * QF_newX_(
        -: 1108:    uint_fast16_t const evtSize,
        -: 1109:    uint_fast16_t const margin,
        -: 1110:    enum_t const sig);
        -: 1111:
        -: 1112://${QF::QF-dyn::gc} ..........................................................
        -: 1113://! @static @public @memberof QF
        -: 1114:void QF_gc(QEvt const * const e);
        -: 1115:
        -: 1116://${QF::QF-dyn::newRef_} .....................................................
        -: 1117://! @static @private @memberof QF
        -: 1118:QEvt const * QF_newRef_(
        -: 1119:    QEvt const * const e,
        -: 1120:    void const * const evtRef);
        -: 1121:
        -: 1122://${QF::QF-dyn::deleteRef_} ..................................................
        -: 1123://! @static @private @memberof QF
        -: 1124:void QF_deleteRef_(void const * const evtRef);
        -: 1125:
        -: 1126://${QF::QF-dyn::gcFromISR} ...................................................
        -: 1127://! @static @public @memberof QF
        -: 1128:void QF_gcFromISR(QEvt const * const e);
        -: 1129://$enddecl${QF::QF-dyn} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        -: 1130:
        -: 1131://$declare${QF-macros} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
        -: 1132:
        -: 1133://${QF-macros::QF_NO_MARGIN} .................................................
        -: 1134:#define QF_NO_MARGIN ((uint_fast16_t)0xFFFFU)
        -: 1135:
        -: 1136://${QF-macros::Q_PRIO} .......................................................
        -: 1137:#define Q_PRIO(prio_, pthre_) ((QPrioSpec)((prio_) | ((pthre_) << 8U)))
        -: 1138:
        -: 1139://${QF-macros::Q_NEW} ........................................................
        -: 1140:#ifndef QEVT_PAR_INIT
        -: 1141:#define Q_NEW(evtT_, sig_) ((evtT_ *)QF_newX_((uint_fast16_t)sizeof(evtT_), \
        -: 1142:                           QF_NO_MARGIN, (enum_t)(sig_)))
        -: 1143:#endif // ndef QEVT_PAR_INIT
        -: 1144:
        -: 1145://${QF-macros::Q_NEW} ........................................................
        -: 1146:#ifdef QEVT_PAR_INIT
        -: 1147:#define Q_NEW(evtT_, sig_, ...) \
        -: 1148:    (evtT_##_init((evtT_ *)QF_newX_((uint_fast16_t)sizeof(evtT_), \
        -: 1149:                  QF_NO_MARGIN, (sig_)), __VA_ARGS__))
        -: 1150:#endif // def QEVT_PAR_INIT
        -: 1151:
        -: 1152://${QF-macros::Q_NEW_X} ......................................................
        -: 1153:#ifndef QEVT_PAR_INIT
        -: 1154:#define Q_NEW_X(evtT_, margin_, sig_) \
        -: 1155:    ((evtT_ *)QF_newX_((uint_fast16_t)sizeof(evtT_), \
        -: 1156:                      (margin_), (enum_t)(sig_)))
        -: 1157:#endif // ndef QEVT_PAR_INIT
        -: 1158:
        -: 1159://${QF-macros::Q_NEW_X} ......................................................
        -: 1160:#ifdef QEVT_PAR_INIT
        -: 1161:#define Q_NEW_X(evtT_, margin_, sig_, ...) \
        -: 1162:    (evtT_##_init((evtT_ *)QF_newX_((uint_fast16_t)sizeof(evtT_), \
        -: 1163:                  (margin_), (sig_)), __VA_ARGS__))
        -: 1164:#endif // def QEVT_PAR_INIT
        -: 1165:
        -: 1166://${QF-macros::Q_NEW_REF} ....................................................
        -: 1167:#define Q_NEW_REF(evtRef_, evtT_) \
        -: 1168:    ((evtRef_) = (evtT_ const *)QF_newRef_(e, (evtRef_)))
        -: 1169:
        -: 1170://${QF-macros::Q_DELETE_REF} .................................................
        -: 1171:#define Q_DELETE_REF(evtRef_) do { \
        -: 1172:    QF_deleteRef_((evtRef_)); \
        -: 1173:    (evtRef_) = (void *)0; \
        -: 1174:} while (false)
        -: 1175:
        -: 1176://${QF-macros::QACTIVE_POST} .................................................
        -: 1177:#ifdef Q_SPY
        -: 1178:#define QACTIVE_POST(me_, e_, sender_) \
        -: 1179:    ((void)QActive_post_((me_), (e_), QF_NO_MARGIN, (sender_)))
        -: 1180:#endif // def Q_SPY
        -: 1181:
        -: 1182://${QF-macros::QACTIVE_POST} .................................................
        -: 1183:#ifndef Q_SPY
        -: 1184:#define QACTIVE_POST(me_, e_, dummy) \
        -: 1185:    ((void)QActive_post_((me_), (e_), QF_NO_MARGIN, (void *)0))
        -: 1186:#endif // ndef Q_SPY
        -: 1187:
        -: 1188://${QF-macros::QACTIVE_POST_X} ...............................................
        -: 1189:#ifdef Q_SPY
        -: 1190:#define QACTIVE_POST_X(me_, e_, margin_, sender_) \
        -: 1191:    (QActive_post_((me_), (e_), (margin_), (sender_)))
        -: 1192:#endif // def Q_SPY
        -: 1193:
        -: 1194://${QF-macros::QACTIVE_POST_X} ...............................................
        -: 1195:#ifndef Q_SPY
        -: 1196:#define QACTIVE_POST_X(me_, e_, margin_, dummy) \
        -: 1197:    (QActive_post_((me_), (e_), (margin_), (void *)0))
        -: 1198:#endif // ndef Q_SPY
        -: 1199:
        -: 1200://${QF-macros::QACTIVE_POST_LIFO} ............................................
        -: 1201:#define QACTIVE_POST_LIFO(me_, e_) \
        -: 1202:    (QActive_postLIFO_((me_), (e_)))
        -: 1203:
        -: 1204://${QF-macros::QACTIVE_PUBLISH} ..............................................
        -: 1205:#ifdef Q_SPY
        -: 1206:#define QACTIVE_PUBLISH(e_, sender_) \
        -: 1207:    (QActive_publish_((e_), (void const *)(sender_), (sender_)->prio))
        -: 1208:#endif // def Q_SPY
        -: 1209:
        -: 1210://${QF-macros::QACTIVE_PUBLISH} ..............................................
        -: 1211:#ifndef Q_SPY
        -: 1212:#define QACTIVE_PUBLISH(e_, dummy) (QActive_publish_((e_), (void *)0, 0U))
        -: 1213:#endif // ndef Q_SPY
        -: 1214:
        -: 1215://${QF-macros::QTIMEEVT_TICK_X} ..............................................
        -: 1216:#ifdef Q_SPY
        -: 1217:#define QTIMEEVT_TICK_X(tickRate_, sender_) (QTimeEvt_tick_((tickRate_), (sender_)))
        -: 1218:#endif // def Q_SPY
        -: 1219:
        -: 1220://${QF-macros::QTIMEEVT_TICK_X} ..............................................
        -: 1221:#ifndef Q_SPY
        -: 1222:#define QTIMEEVT_TICK_X(tickRate_, dummy) (QTimeEvt_tick_((tickRate_), (void *)0))
        -: 1223:#endif // ndef Q_SPY
        -: 1224:
        -: 1225://${QF-macros::QTIMEEVT_TICK} ................................................
        -: 1226:#define QTIMEEVT_TICK(sender_) QTIMEEVT_TICK_X(0U, (sender_))
        -: 1227:
        -: 1228://${QF-macros::QTICKER_TRIG} .................................................
        -: 1229:#ifdef Q_SPY
        -: 1230:#define QTICKER_TRIG(ticker_, sender_) (QTicker_trig_((ticker_), (sender_)))
        -: 1231:#endif // def Q_SPY
        -: 1232:
        -: 1233://${QF-macros::QTICKER_TRIG} .................................................
        -: 1234:#ifndef Q_SPY
        -: 1235:#define QTICKER_TRIG(ticker_, sender_) (QTicker_trig_((ticker_), (void *)0))
        -: 1236:#endif // ndef Q_SPY
        -: 1237:
        -: 1238://${QF-macros::QF_CRIT_EXIT_NOP} .............................................
        -: 1239:#ifndef QF_CRIT_EXIT_NOP
        -: 1240:#define QF_CRIT_EXIT_NOP() ((void)0)
        -: 1241:#endif // ndef QF_CRIT_EXIT_NOP
        -: 1242:
        -: 1243://${QF-macros::QF_TICK_X} ....................................................
        -: 1244:#define QF_TICK_X(tickRate_, sender_) QTIMEEVT_TICK_X((tickRate_), (sender_))
        -: 1245:
        -: 1246://${QF-macros::QF_TICK} ......................................................
        -: 1247:#define QF_TICK(sender_) QTIMEEVT_TICK(sender_)
        -: 1248:
        -: 1249://${QF-macros::QF_PUBLISH} ...................................................
        -: 1250:#define QF_PUBLISH(e_, sender_) QACTIVE_PUBLISH((e_), (sender_))
        -: 1251:
        -: 1252://${QF-macros::QF_MEM_SYS} ...................................................
        -: 1253:#ifndef QF_MEM_SYS
        -: 1254:#define QF_MEM_SYS() ((void)0)
        -: 1255:#endif // ndef QF_MEM_SYS
        -: 1256:
        -: 1257://${QF-macros::QF_MEM_APP} ...................................................
        -: 1258:#ifndef QF_MEM_APP
        -: 1259:#define QF_MEM_APP() ((void)0)
        -: 1260:#endif // ndef QF_MEM_APP
        -: 1261://$enddecl${QF-macros} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        -: 1262:
        -: 1263:#endif // QP_H_
