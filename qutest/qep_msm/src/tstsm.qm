<?xml version="1.0" encoding="UTF-8"?>
<model version="7.0.1" links="1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.state-machine.com/qm/qm7.xsd">
 <documentation>Copyright (C) 2005 Quantum Leaps, LLC. All rights reserved.

                   Q u a n t u m  L e a P s
                   ------------------------
                   Modern Embedded Software

SPDX-License-Identifier: LicenseRef-QL-cert

This software is part of the QP/C Certification Kit, which is licensed
under the terms of the Quantum Leaps Certification Kit licenses. Please
contact Quantum Leaps for more information about the available licensing
options.

RESTRICTIONS
You may NOT:
(a) redistribute, encumber, sell, rent, lease, sublicense, or otherwise
    transfer rights in this software,
(b) remove or alter any trademark, logo, copyright or other proprietary
    notices, legends, symbols or labels present in this software,
(c) plagiarize this software to sidestep the licensing obligations.

Quantum Leaps contact information:
&lt;www.state-machine.com/licensing&gt;
&lt;info@state-machine.com&gt;</documentation>
 <!--${qpc}-->
 <framework name="qpc">
  <license name="LicenseRef-QL-commercial">SafeQP/C Licensee
qpc
2025-12-31
Copyright (C) 2005 Quantum Leaps, LLC. All rights reserved.

                   Q u a n t u m  L e a P s
                   ------------------------
                   Modern Embedded Software

SPDX-License-Identifier: LicenseRef-QL-commercial

This software is licensed under the terms of the Quantum Leaps commercial
licenses. Please contact Quantum Leaps for more information about the
available licensing options.

RESTRICTIONS
You may NOT :
(a) redistribute, encumber, sell, rent, lease, sublicense, or otherwise
    transfer rights in this software,
(b) remove or alter any trademark, logo, copyright or other proprietary
    notices, legends, symbols or labels present in this software,
(c) plagiarize this software to sidestep the licensing obligations.

Quantum Leaps contact information :
&lt;www.state-machine.com/licensing&gt;
&lt;info@state-machine.com&gt;
#2CE493D94A8DD46472A5E155B804C67DA0BA7016</license>
 </framework>
 <!--${Shared}-->
 <package name="Shared" stereotype="0x02">
  <!--${Shared::TstSMSignals}-->
  <attribute name="TstSMSignals" type="enum" visibility="0x04" properties="0x00">
   <code>{
    A_SIG = Q_USER_SIG,
    B_SIG,
    C_SIG,
    D_SIG,
    E_SIG,
    F_SIG,
    G_SIG,
    H_SIG,
    I_SIG,
    MAX_SIG
};</code>
  </attribute>
  <!--${Shared::the_TstSM}-->
  <attribute name="the_TstSM" type="QAsm * const" visibility="0x00" properties="0x00">
   <documentation>opaque pointer to the test SM</documentation>
   <code>= &amp;TstSM_inst.super.super;</code>
  </attribute>
  <!--${Shared::BSP_display}-->
  <operation name="BSP_display" type="void" visibility="0x00" properties="0x00">
   <!--${Shared::BSP_display::msg}-->
   <parameter name="msg" type="char const *"/>
  </operation>
  <!--${Shared::BSP_terminate}-->
  <operation name="BSP_terminate" type="void" visibility="0x00" properties="0x00">
   <!--${Shared::BSP_terminate::result}-->
   <parameter name="result" type="int16_t const"/>
  </operation>
  <!--${Shared::TstSM_ctor}-->
  <operation name="TstSM_ctor" type="void" visibility="0x00" properties="0x00">
   <code>TstSM *me = &amp;TstSM_inst;
QMsm_ctor(&amp;me-&gt;super, Q_STATE_CAST(&amp;TstSM_initial));</code>
  </operation>
  <!--${Shared::TstSM_isIn}-->
  <operation name="TstSM_isIn" type="bool" visibility="0x00" properties="0x00">
   <!--${Shared::TstSM_isIn::state_num}-->
   <parameter name="state_num" type="uint32_t const"/>
   <code>bool stat = false;
switch (state_num) {
case 0:
    stat = QASM_IS_IN(the_TstSM, Q_STATE_CAST(&amp;TstSM_s));
    break;
case 1:
    stat = QASM_IS_IN(the_TstSM, Q_STATE_CAST(&amp;TstSM_s1));
    break;
case 11:
    stat = QASM_IS_IN(the_TstSM, Q_STATE_CAST(&amp;TstSM_s11));
    break;
case 111:
    stat = QASM_IS_IN(the_TstSM, Q_STATE_CAST(&amp;TstSM_s111));
    break;
case 112:
    stat = QASM_IS_IN(the_TstSM, Q_STATE_CAST(&amp;TstSM_s112));
    break;
case 12:
    stat = QASM_IS_IN(the_TstSM, Q_STATE_CAST(&amp;TstSM_s12));
    break;
case 2:
    stat = QASM_IS_IN(the_TstSM, Q_STATE_CAST(&amp;TstSM_s2));
    break;
case 21:
    stat = QASM_IS_IN(the_TstSM, Q_STATE_CAST(&amp;TstSM_s21));
    break;
case 211:
    stat = QASM_IS_IN(the_TstSM, Q_STATE_CAST(&amp;TstSM_s211));
    break;
case 212:
    stat = QASM_IS_IN(the_TstSM, Q_STATE_CAST(&amp;TstSM_s212));
    break;
case 22:
    stat = QASM_IS_IN(the_TstSM, Q_STATE_CAST(&amp;TstSM_s22));
    break;
default:
    Q_ERROR();
}
return stat;</code>
  </operation>
 </package>
 <!--${Shared_SF}-->
 <package name="Shared_SF" stereotype="0x00">
  <!--${Shared_SF::TstSM0_ctor}-->
  <operation name="TstSM0_ctor" type="void" visibility="0x00" properties="0x00">
   <code>TstSM0 *me = &amp;TstSM0_inst;
QMsm_ctor(&amp;me-&gt;super, Q_STATE_CAST(0));</code>
  </operation>
  <!--${Shared_SF::TstSM1_ctor}-->
  <operation name="TstSM1_ctor" type="void" visibility="0x00" properties="0x00">
   <code>TstSM1 *me = &amp;TstSM1_inst;
QMsm_ctor(&amp;me-&gt;super, Q_STATE_CAST(&amp;TstSM1_initial));
me-&gt;super.super.state.obj = (QMState *)1234; // corrupt the state</code>
  </operation>
  <!--${Shared_SF::TstSM2_ctor}-->
  <operation name="TstSM2_ctor" type="void" visibility="0x00" properties="0x00">
   <code>TstSM2 *me = &amp;TstSM2_inst;
QMsm_ctor(&amp;me-&gt;super, Q_STATE_CAST(&amp;TstSM2_initial));</code>
  </operation>
  <!--${Shared_SF::TstSM3_ctor}-->
  <operation name="TstSM3_ctor" type="void" visibility="0x00" properties="0x00">
   <code>TstSM3 *me = &amp;TstSM3_inst;
QMsm_ctor(&amp;me-&gt;super, Q_STATE_CAST(&amp;TstSM3_initial));</code>
  </operation>
  <!--${Shared_SF::TstSM4_ctor}-->
  <operation name="TstSM4_ctor" type="void" visibility="0x00" properties="0x00">
   <code>TstSM4 *me = &amp;TstSM4_inst;
QMsm_ctor(&amp;me-&gt;super, Q_STATE_CAST(&amp;TstSM4_initial));</code>
  </operation>
  <!--${Shared_SF::TstSM5_ctor}-->
  <operation name="TstSM5_ctor" type="void" visibility="0x00" properties="0x00">
   <code>TstSM5 *me = &amp;TstSM5_inst;
QMsm_ctor(&amp;me-&gt;super, Q_STATE_CAST(&amp;TstSM5_initial));</code>
  </operation>
  <!--${Shared_SF::the_TstSM0}-->
  <attribute name="the_TstSM0" type="QAsm * const" visibility="0x00" properties="0x00">
   <documentation>opaque pointer to the test SM</documentation>
   <code>= &amp;TstSM0_inst.super.super;</code>
  </attribute>
  <!--${Shared_SF::the_TstSM1}-->
  <attribute name="the_TstSM1" type="QAsm * const" visibility="0x00" properties="0x00">
   <documentation>opaque pointer to the test SM</documentation>
   <code>= &amp;TstSM1_inst.super.super;</code>
  </attribute>
  <!--${Shared_SF::the_TstSM2}-->
  <attribute name="the_TstSM2" type="QAsm * const" visibility="0x00" properties="0x00">
   <documentation>opaque pointer to the test SM</documentation>
   <code>= &amp;TstSM2_inst.super.super;</code>
  </attribute>
  <!--${Shared_SF::the_TstSM3}-->
  <attribute name="the_TstSM3" type="QAsm * const" visibility="0x00" properties="0x00">
   <documentation>opaque pointer to the test SM</documentation>
   <code>= &amp;TstSM3_inst.super.super;</code>
  </attribute>
  <!--${Shared_SF::the_TstSM4}-->
  <attribute name="the_TstSM4" type="QAsm * const" visibility="0x00" properties="0x00">
   <documentation>opaque pointer to the test SM</documentation>
   <code>= &amp;TstSM4_inst.super.super;</code>
  </attribute>
  <!--${Shared_SF::the_TstSM5}-->
  <attribute name="the_TstSM5" type="QAsm * const" visibility="0x00" properties="0x00">
   <documentation>opaque pointer to the test SM</documentation>
   <code>= &amp;TstSM5_inst.super.super;</code>
  </attribute>
  <!--${Shared_SF::TstSM5_isIn}-->
  <operation name="TstSM5_isIn" type="bool" visibility="0x00" properties="0x00">
   <!--${Shared_SF::TstSM5_isIn::state_num}-->
   <parameter name="state_num" type="uint32_t const"/>
   <code>bool stat = false;
switch (state_num) {
case 1:
    stat = QASM_IS_IN(the_TstSM5, Q_STATE_CAST(&amp;TstSM5_s1));
    break;
case 2:
    stat = QASM_IS_IN(the_TstSM5, Q_STATE_CAST(&amp;TstSM5_s2));
    break;
case 3:
    stat = QASM_IS_IN(the_TstSM5, Q_STATE_CAST(&amp;TstSM5_s3));
    break;
case 4:
    stat = QASM_IS_IN(the_TstSM5, Q_STATE_CAST(&amp;TstSM5_s4));
    break;
default:
    Q_ERROR();
}
return stat;</code>
  </operation>
  <!--${Shared_SF::TstSM5_child}-->
  <operation name="TstSM5_child" type="QStateHandler" visibility="0x00" properties="0x00">
   <!--${Shared_SF::TstSM5_child::state_num}-->
   <parameter name="state_num" type="uint32_t const"/>
   <code>QMState const *state;
QMsm *me = (QMsm *)the_TstSM5;
switch (state_num) {
case 1:
    state = QMsm_childStateObj(me, &amp;TstSM5_s1_s);
    break;
case 2:
    state = QMsm_childStateObj(me, &amp;TstSM5_s2_s);
    break;
case 3:
    state = QMsm_childStateObj(me, &amp;TstSM5_s3_s);
    break;
case 4:
    state = QMsm_childStateObj(me, &amp;TstSM5_s4_s);
    break;
default:
    Q_ERROR();
}
return state-&gt;stateHandler;</code>
  </operation>
 </package>
 <!--${SMs}-->
 <package name="SMs" stereotype="0x02">
  <!--${SMs::TstSM}-->
  <class name="TstSM" superclass="qpc::QMsm">
   <documentation>Test state machine for extensive testing of
QMsm-style state machine implementation.</documentation>
   <!--${SMs::TstSM::foo}-->
   <attribute name="foo" type="uint8_t" visibility="0x02" properties="0x00"/>
   <!--${SMs::TstSM::inst}-->
   <attribute name="inst" type="TstSM" visibility="0x00" properties="0x01"/>
   <!--${SMs::TstSM::SM}-->
   <statechart properties="0x03">
    <!--${SMs::TstSM::SM::initial}-->
    <initial target="../1/6">
     <action brief="top-init">Q_UNUSED_PAR(par);
me-&gt;foo = 0U;

BSP_display(&quot;top-INIT;&quot;);

QS_OBJ_DICTIONARY(&amp;TstSM_inst);</action>
     <initial_glyph conn="2,4,5,0,72,24">
      <action box="1,-2,13,2"/>
     </initial_glyph>
    </initial>
    <!--${SMs::TstSM::SM::s}-->
    <state name="s">
     <entry brief="s-ENTRY">BSP_display(&quot;s-ENTRY;&quot;);</entry>
     <exit brief="s-EXIT">BSP_display(&quot;s-EXIT;&quot;);</exit>
     <!--${SMs::TstSM::SM::s::initial}-->
     <initial target="../5">
      <action brief="s-INIT">BSP_display(&quot;s-INIT;&quot;);</action>
      <initial_glyph conn="4,16,5,0,20,12">
       <action box="1,-2,11,2"/>
      </initial_glyph>
     </initial>
     <!--${SMs::TstSM::SM::s::history}-->
     <history type="shallow" target="../5">
      <history_glyph color="1" conn="100,16,1,0,-58,12"/>
     </history>
     <!--${SMs::TstSM::SM::s::E}-->
     <tran trig="E" target="../6/5">
      <action brief="s-E">BSP_display(&quot;s-E;&quot;);</action>
      <tran_glyph conn="2,23,3,1,96,30,-10">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <!--${SMs::TstSM::SM::s::I}-->
     <tran trig="I">
      <action brief="s-I">BSP_display(&quot;s-I;&quot;);</action>
      <tran_glyph conn="2,26,3,-1,14">
       <action box="0,-2,12,2"/>
      </tran_glyph>
     </tran>
     <!--${SMs::TstSM::SM::s::C}-->
     <tran trig="C" target="../../2">
      <action brief="s-C">BSP_display(&quot;s-C;&quot;);</action>
      <tran_glyph conn="2,20,3,3,90,-8,12">
       <action box="0,-2,13,2"/>
      </tran_glyph>
     </tran>
     <!--${SMs::TstSM::SM::s::s1}-->
     <state name="s1">
      <entry brief="s1-ENTRY">BSP_display(&quot;s1-ENTRY;&quot;);</entry>
      <exit brief="s1-EXIT">BSP_display(&quot;s1-EXIT;&quot;);</exit>
      <!--${SMs::TstSM::SM::s::s1::initial}-->
      <initial target="../5/4">
       <action brief="s1-INIT">BSP_display(&quot;s1-INIT;&quot;);</action>
       <initial_glyph conn="6,37,5,0,22,37">
        <action box="0,-2,12,2"/>
       </initial_glyph>
      </initial>
      <!--${SMs::TstSM::SM::s::s1::history}-->
      <history type="shallow" target="../5">
       <history_glyph conn="44,37,1,0,-8,13"/>
      </history>
      <!--${SMs::TstSM::SM::s::s1::B}-->
      <tran trig="B" target="../6">
       <action brief="s1-B">BSP_display(&quot;s1-B;&quot;);</action>
       <tran_glyph conn="4,41,3,1,38,67,-4">
        <action box="0,-2,12,2"/>
       </tran_glyph>
      </tran>
      <!--${SMs::TstSM::SM::s::s1::F}-->
      <tran trig="F" target="../../6/5">
       <action brief="s1-F">BSP_display(&quot;s1-F;&quot;);</action>
       <tran_glyph conn="4,44,3,3,42,9,10">
        <action box="0,-2,15,2"/>
       </tran_glyph>
      </tran>
      <!--${SMs::TstSM::SM::s::s1::I}-->
      <tran trig="I">
       <!--${SMs::TstSM::SM::s::s1::I::[me->foo]}-->
       <choice>
        <guard>me-&gt;foo</guard>
        <action brief="s1-I">me-&gt;foo = 0U;
BSP_display(&quot;s1-I;&quot;);</action>
        <choice_glyph conn="10,47,5,-1,14">
         <action box="1,0,14,2"/>
        </choice_glyph>
       </choice>
       <tran_glyph conn="4,47,3,-1,6">
        <action box="0,-2,6,2"/>
       </tran_glyph>
      </tran>
      <!--${SMs::TstSM::SM::s::s1::s11}-->
      <state name="s11">
       <entry brief="s11-ENTRY">BSP_display(&quot;s11-ENTRY;&quot;);</entry>
       <exit brief="s11-EXIT">BSP_display(&quot;s11-EXIT;&quot;);</exit>
       <!--${SMs::TstSM::SM::s::s1::s11::initial}-->
       <initial target="../4">
        <action brief="s11-INIT">BSP_display(&quot;s11-INIT;&quot;);</action>
        <initial_glyph conn="8,59,5,0,18,15">
         <action box="1,-2,20,4"/>
        </initial_glyph>
       </initial>
       <!--${SMs::TstSM::SM::s::s1::s11::A}-->
       <tran trig="A" target="..">
        <action brief="s11-A">BSP_display(&quot;s11-A;&quot;);</action>
        <tran_glyph conn="6,63,3,1,34,-5,-2">
         <action box="0,-2,15,2"/>
        </tran_glyph>
       </tran>
       <!--${SMs::TstSM::SM::s::s1::s11::D}-->
       <tran trig="D">
        <!--${SMs::TstSM::SM::s::s1::s11::D::[!me->foo]}-->
        <choice target="../../..">
         <guard>!me-&gt;foo</guard>
         <action brief="s11-D;foo=1">me-&gt;foo = 1U;
BSP_display(&quot;s11-D;&quot;);</action>
         <choice_glyph conn="18,67,5,1,26">
          <action box="1,0,18,2"/>
         </choice_glyph>
        </choice>
        <tran_glyph conn="6,67,3,-1,12">
         <action box="0,-2,10,2"/>
        </tran_glyph>
       </tran>
       <!--${SMs::TstSM::SM::s::s1::s11::G}-->
       <tran trig="G" target="../../../6" cpref="../../../6/1">
        <action brief="s11-G-&gt;H*-s2">BSP_display(&quot;s11-G-&gt;H*-s2;&quot;);</action>
        <tran_glyph conn="6,72,3,1,42,-46,48,11,-1">
         <action box="0,-2,20,2"/>
        </tran_glyph>
       </tran>
       <!--${SMs::TstSM::SM::s::s1::s11::s111}-->
       <state name="s111">
        <entry brief="s111-ENTRY">BSP_display(&quot;s111-ENTRY;&quot;);</entry>
        <exit brief="s111-EXIT">BSP_display(&quot;s111-EXIT;&quot;);</exit>
        <!--${SMs::TstSM::SM::s::s1::s11::s111::C}-->
        <tran trig="C" target="../../5">
         <action brief="s111-C">BSP_display(&quot;s111-C;&quot;);</action>
         <tran_glyph conn="8,84,3,1,28,8,-4">
          <action box="0,-2,13,2"/>
         </tran_glyph>
        </tran>
        <state_glyph color="1" node="8,74,24,12">
         <entry box="0,3,22,2"/>
         <exit box="0,5,22,2"/>
        </state_glyph>
       </state>
       <!--${SMs::TstSM::SM::s::s1::s11::s112}-->
       <state name="s112">
        <entry brief="s112-ENTRY">BSP_display(&quot;s112-ENTRY;&quot;);</entry>
        <exit brief="s112-EXIT">BSP_display(&quot;s112-EXIT;&quot;);</exit>
        <!--${SMs::TstSM::SM::s::s1::s11::s112::H}-->
        <tran trig="H" target="../../../..">
         <action brief="s112-H">BSP_display(&quot;s112-H;&quot;);</action>
         <tran_glyph conn="8,98,3,2,38,18">
          <action box="0,-2,14,2"/>
         </tran_glyph>
        </tran>
        <state_glyph color="1" node="8,88,24,12">
         <entry box="0,3,22,2"/>
         <exit box="0,5,22,3"/>
        </state_glyph>
       </state>
       <state_glyph color="2" node="6,50,32,52">
        <entry box="0,3,29,2"/>
        <exit box="0,5,29,2"/>
       </state_glyph>
      </state>
      <!--${SMs::TstSM::SM::s::s1::s12}-->
      <state name="s12">
       <entry brief="s12-ENTRY">BSP_display(&quot;s12-ENTRY;&quot;);</entry>
       <exit brief="s12-EXIT">BSP_display(&quot;s12-EXIT;&quot;);</exit>
       <state_glyph color="3" node="6,104,32,8">
        <entry box="0,3,21,2"/>
        <exit box="0,5,21,2"/>
       </state_glyph>
      </state>
      <state_glyph node="4,28,40,86">
       <entry box="0,3,39,2"/>
       <exit box="0,5,39,2"/>
      </state_glyph>
     </state>
     <!--${SMs::TstSM::SM::s::s2}-->
     <state name="s2">
      <entry brief="s2-ENTRY">BSP_display(&quot;s2-ENTRY;&quot;);</entry>
      <exit brief="s2-EXIT">BSP_display(&quot;s2-EXIT;&quot;);</exit>
      <!--${SMs::TstSM::SM::s::s2::initial}-->
      <initial target="../5/4">
       <action brief="s2-INIT">BSP_display(&quot;s2-INIT;&quot;);</action>
       <initial_glyph conn="56,37,5,0,22,37">
        <action box="0,-2,12,2"/>
       </initial_glyph>
      </initial>
      <!--${SMs::TstSM::SM::s::s2::history}-->
      <history type="deep" target="../5/4">
       <history_glyph color="1" conn="94,37,1,0,-14,37"/>
      </history>
      <!--${SMs::TstSM::SM::s::s2::B}-->
      <tran trig="B" target="../6">
       <action brief="s2-B">BSP_display(&quot;s2-B;&quot;);</action>
       <tran_glyph conn="54,41,3,1,38,66,-4">
        <action box="0,-2,12,2"/>
       </tran_glyph>
      </tran>
      <!--${SMs::TstSM::SM::s::s2::F}-->
      <tran trig="F" target="../../5/5">
       <action brief="s2-F">BSP_display(&quot;s2-F;&quot;);</action>
       <tran_glyph conn="54,44,3,1,-4,12,-12">
        <action box="0,-1,15,2"/>
       </tran_glyph>
      </tran>
      <!--${SMs::TstSM::SM::s::s2::I}-->
      <tran trig="I">
       <!--${SMs::TstSM::SM::s::s2::I::[me->foo]}-->
       <choice>
        <guard>me-&gt;foo</guard>
        <action brief="s2-I">me-&gt;foo = 0U;
BSP_display(&quot;s2-I;&quot;);</action>
        <choice_glyph conn="60,47,5,-1,14">
         <action box="1,0,17,2"/>
        </choice_glyph>
       </choice>
       <tran_glyph conn="54,47,3,-1,6">
        <action box="0,-2,6,2"/>
       </tran_glyph>
      </tran>
      <!--${SMs::TstSM::SM::s::s2::s21}-->
      <state name="s21">
       <entry brief="s21-ENTRY">BSP_display(&quot;s21-ENTRY;&quot;);</entry>
       <exit brief="s21-EXIT">BSP_display(&quot;s21-EXIT;&quot;);</exit>
       <!--${SMs::TstSM::SM::s::s2::s21::initial}-->
       <initial target="../4">
        <action brief="s21-INIT">BSP_display(&quot;s21-INIT;&quot;);</action>
        <initial_glyph conn="58,59,5,0,18,15">
         <action box="1,-2,20,4"/>
        </initial_glyph>
       </initial>
       <!--${SMs::TstSM::SM::s::s2::s21::A}-->
       <tran trig="A" target="..">
        <action brief="s21-A">BSP_display(&quot;s21-A;&quot;);</action>
        <tran_glyph conn="56,63,3,1,34,-5,-2">
         <action box="0,-2,15,2"/>
        </tran_glyph>
       </tran>
       <!--${SMs::TstSM::SM::s::s2::s21::D}-->
       <tran trig="D">
        <!--${SMs::TstSM::SM::s::s2::s21::D::[!me->foo]}-->
        <choice target="../../..">
         <guard>!me-&gt;foo</guard>
         <action brief="s21-D;foo=1">me-&gt;foo = 1U;
BSP_display(&quot;s21-D;&quot;);</action>
         <choice_glyph conn="68,67,5,1,26">
          <action box="1,0,18,2"/>
         </choice_glyph>
        </choice>
        <tran_glyph conn="56,67,3,-1,12">
         <action box="0,-2,10,2"/>
        </tran_glyph>
       </tran>
       <!--${SMs::TstSM::SM::s::s2::s21::G}-->
       <tran trig="G" target="../../../5" cpref="../../../5/1">
        <action brief="s21-G">BSP_display(&quot;s21-G-&gt;H*-s1;&quot;);</action>
        <tran_glyph conn="56,72,3,1,-4,-35,-7">
         <action box="0,-1,14,2"/>
        </tran_glyph>
       </tran>
       <!--${SMs::TstSM::SM::s::s2::s21::s211}-->
       <state name="s211">
        <entry brief="s211-ENTRY">BSP_display(&quot;s211-ENTRY;&quot;);</entry>
        <exit brief="s211-EXIT">BSP_display(&quot;s211-EXIT;&quot;);</exit>
        <!--${SMs::TstSM::SM::s::s2::s21::s211::C}-->
        <tran trig="C" target="../../5">
         <action brief="s211-C">BSP_display(&quot;s211-C;&quot;);</action>
         <tran_glyph conn="58,84,3,1,28,8,-4">
          <action box="0,-2,13,2"/>
         </tran_glyph>
        </tran>
        <state_glyph color="1" node="58,74,24,12">
         <entry box="0,3,22,2"/>
         <exit box="0,5,22,2"/>
        </state_glyph>
       </state>
       <!--${SMs::TstSM::SM::s::s2::s21::s212}-->
       <state name="s212">
        <entry brief="s212-ENTRY">BSP_display(&quot;s212-ENTRY;&quot;);</entry>
        <exit brief="s212-EXIT">BSP_display(&quot;s212-EXIT;&quot;);</exit>
        <!--${SMs::TstSM::SM::s::s2::s21::s212::H}-->
        <tran trig="H" target="../../../..">
         <action brief="s212-H">BSP_display(&quot;s212-H;&quot;);</action>
         <tran_glyph conn="58,98,3,2,-6,18">
          <action box="0,-1,14,2"/>
         </tran_glyph>
        </tran>
        <state_glyph color="1" node="58,88,24,12">
         <entry box="0,3,22,2"/>
         <exit box="0,5,22,2"/>
        </state_glyph>
       </state>
       <state_glyph color="2" node="56,50,32,52">
        <entry box="0,3,27,2"/>
        <exit box="0,5,27,2"/>
       </state_glyph>
      </state>
      <!--${SMs::TstSM::SM::s::s2::s22}-->
      <state name="s22">
       <entry brief="s22-ENTRY">BSP_display(&quot;s22-ENTRY;&quot;);</entry>
       <exit brief="s22-EXIT">BSP_display(&quot;s22-EXIT;&quot;);</exit>
       <state_glyph color="3" node="56,104,32,8">
        <entry box="0,3,21,2"/>
        <exit box="0,5,21,2"/>
       </state_glyph>
      </state>
      <state_glyph node="54,28,40,86">
       <entry box="0,3,39,2"/>
       <exit box="0,5,39,2"/>
      </state_glyph>
     </state>
     <state_glyph node="2,6,98,110">
      <entry box="0,3,32,2"/>
      <exit box="0,5,32,2"/>
     </state_glyph>
    </state>
    <!--${SMs::TstSM::SM::t}-->
    <state name="t">
     <entry brief="t-ENTRY">BSP_display(&quot;t-ENTRY;&quot;);</entry>
     <exit brief="t-EXIT">BSP_display(&quot;t-EXIT;&quot;);</exit>
     <!--${SMs::TstSM::SM::t::C}-->
     <tran trig="C" target="../../1" cpref="../../1/1">
      <action brief="t-C-&gt;H-s">BSP_display(&quot;t-C-&gt;H-s;&quot;);</action>
      <tran_glyph conn="104,16,3,1,-3">
       <action box="0,-1,13,2"/>
      </tran_glyph>
     </tran>
     <!--${SMs::TstSM::SM::t::E}-->
     <tran trig="E" target="../../1/6" cpref="../../1/6/1">
      <action brief="t-E-&gt;H*-s2">BSP_display(&quot;t-E-&gt;H*-s2;&quot;);</action>
      <tran_glyph conn="104,20,3,1,-2,17,-7">
       <action box="0,-1,13,2"/>
      </tran_glyph>
     </tran>
     <state_glyph color="3" node="104,6,12,17">
      <entry box="0,3,11,2"/>
      <exit box="0,5,11,2"/>
     </state_glyph>
    </state>
    <state_diagram size="118,118"/>
   </statechart>
  </class>
 </package>
 <!--${SFs}-->
 <package name="SFs" stereotype="0x00">
  <!--${SFs::TstSM0}-->
  <class name="TstSM0" superclass="qpc::QMsm">
   <!--${SFs::TstSM0::inst}-->
   <attribute name="inst" type="TstSM0" visibility="0x00" properties="0x01"/>
  </class>
  <!--${SFs::TstSM1}-->
  <class name="TstSM1" superclass="qpc::QMsm">
   <!--${SFs::TstSM1::inst}-->
   <attribute name="inst" type="TstSM1" visibility="0x00" properties="0x01"/>
   <!--${SFs::TstSM1::SM}-->
   <statechart properties="0x02">
    <!--${SFs::TstSM1::SM::initial}-->
    <initial target="../1">
     <action>Q_UNUSED_PAR(par);</action>
     <initial_glyph conn="4,4,5,1,42,7,-2">
      <action box="0,-2,10,2"/>
     </initial_glyph>
    </initial>
    <!--${SFs::TstSM1::SM::s1}-->
    <state name="s1">
     <state_glyph node="2,8,42,12"/>
    </state>
    <state_diagram size="50,24"/>
   </statechart>
  </class>
  <!--${SFs::TstSM2}-->
  <class name="TstSM2" superclass="qpc::QMsm">
   <!--${SFs::TstSM2::inst}-->
   <attribute name="inst" type="TstSM2" visibility="0x00" properties="0x01"/>
   <!--${SFs::TstSM2::SM}-->
   <statechart properties="0x02">
    <!--${SFs::TstSM2::SM::initial}-->
    <initial target="../1">
     <action>Q_UNUSED_PAR(par);
return QM_TRAN(0); // initial tran. to NULL</action>
     <initial_glyph conn="4,4,5,1,42,7,-2">
      <action box="0,-2,10,2"/>
     </initial_glyph>
    </initial>
    <!--${SFs::TstSM2::SM::s1}-->
    <state name="s1">
     <state_glyph node="2,8,42,12"/>
    </state>
    <state_diagram size="50,24"/>
   </statechart>
  </class>
  <!--${SFs::TstSM3}-->
  <class name="TstSM3" superclass="qpc::QMsm">
   <!--${SFs::TstSM3::inst}-->
   <attribute name="inst" type="TstSM3" visibility="0x00" properties="0x01"/>
   <!--${SFs::TstSM3::SM}-->
   <statechart properties="0x02">
    <!--${SFs::TstSM3::SM::initial}-->
    <initial target="../1">
     <action>Q_UNUSED_PAR(par);
return QM_TRAN_INIT((struct QMTranActTable *)0); // NULL tran. table</action>
     <initial_glyph conn="4,4,5,1,42,7,-2">
      <action box="0,-2,10,2"/>
     </initial_glyph>
    </initial>
    <!--${SFs::TstSM3::SM::s1}-->
    <state name="s1">
     <state_glyph node="2,8,42,12"/>
    </state>
    <state_diagram size="50,24"/>
   </statechart>
  </class>
  <!--${SFs::TstSM4}-->
  <class name="TstSM4" superclass="qpc::QMsm">
   <!--${SFs::TstSM4::inst}-->
   <attribute name="inst" type="TstSM4" visibility="0x00" properties="0x01"/>
   <!--${SFs::TstSM4::SM}-->
   <statechart properties="0x02">
    <!--${SFs::TstSM4::SM::initial}-->
    <initial target="../1">
     <action>Q_UNUSED_PAR(par);</action>
     <initial_glyph conn="3,2,5,1,43,6,-2">
      <action box="0,-2,10,2"/>
     </initial_glyph>
    </initial>
    <!--${SFs::TstSM4::SM::s1}-->
    <state name="s1">
     <entry>//</entry>
     <exit>//</exit>
     <!--${SFs::TstSM4::SM::s1::initial}-->
     <initial target="../1">
      <initial_glyph conn="40,12,5,0,-17,4">
       <action box="0,-2,10,2"/>
      </initial_glyph>
     </initial>
     <!--${SFs::TstSM4::SM::s1::s2}-->
     <state name="s2">
      <entry>//</entry>
      <exit>//</exit>
      <!--${SFs::TstSM4::SM::s1::s2::initial}-->
      <initial target="../1">
       <initial_glyph conn="38,24,5,0,-15,4">
        <action box="0,-2,10,2"/>
       </initial_glyph>
      </initial>
      <!--${SFs::TstSM4::SM::s1::s2::s3}-->
      <state name="s3">
       <entry>//</entry>
       <exit>//</exit>
       <!--${SFs::TstSM4::SM::s1::s2::s3::initial}-->
       <initial target="../1">
        <initial_glyph conn="36,36,5,0,-13,4">
         <action box="0,-2,10,2"/>
        </initial_glyph>
       </initial>
       <!--${SFs::TstSM4::SM::s1::s2::s3::s4}-->
       <state name="s4">
        <entry>//</entry>
        <exit>//</exit>
        <!--${SFs::TstSM4::SM::s1::s2::s3::s4::initial}-->
        <initial target="../1">
         <initial_glyph conn="34,48,5,0,-11,4">
          <action box="0,-2,10,2"/>
         </initial_glyph>
        </initial>
        <!--${SFs::TstSM4::SM::s1::s2::s3::s4::s5}-->
        <state name="s5">
         <entry>//</entry>
         <exit>//</exit>
         <!--${SFs::TstSM4::SM::s1::s2::s3::s4::s5::initial}-->
         <initial target="../1">
          <initial_glyph conn="32,60,5,0,-9,4">
           <action box="0,-2,10,2"/>
          </initial_glyph>
         </initial>
         <!--${SFs::TstSM4::SM::s1::s2::s3::s4::s5::s6}-->
         <state name="s6">
          <entry>//</entry>
          <exit>//</exit>
          <!--${SFs::TstSM4::SM::s1::s2::s3::s4::s5::s6::initial}-->
          <initial target="../1">
           <initial_glyph conn="30,72,5,0,-7,4">
            <action box="0,-2,10,2"/>
           </initial_glyph>
          </initial>
          <!--${SFs::TstSM4::SM::s1::s2::s3::s4::s5::s6::s7}-->
          <state name="s7">
           <entry>//</entry>
           <exit>//</exit>
           <!--${SFs::TstSM4::SM::s1::s2::s3::s4::s5::s6::s7::initial}-->
           <initial target="../1">
            <initial_glyph conn="28,82,5,0,-5,4">
             <action box="0,-2,10,2"/>
            </initial_glyph>
           </initial>
           <!--${SFs::TstSM4::SM::s1::s2::s3::s4::s5::s6::s7::s8}-->
           <state name="s8">
            <entry>//</entry>
            <exit>//</exit>
            <state_glyph node="16,86,14,8">
             <entry box="0,3,6,2"/>
             <exit box="0,5,6,2"/>
            </state_glyph>
           </state>
           <state_glyph node="14,76,18,20">
            <entry box="0,3,6,2"/>
            <exit box="0,5,6,2"/>
           </state_glyph>
          </state>
          <state_glyph node="12,64,22,34">
           <entry box="0,3,6,2"/>
           <exit box="0,5,6,2"/>
          </state_glyph>
         </state>
         <state_glyph node="10,52,26,48">
          <entry box="0,3,6,2"/>
          <exit box="0,5,6,2"/>
         </state_glyph>
        </state>
        <state_glyph node="8,40,30,62">
         <entry box="0,3,6,2"/>
         <exit box="0,5,6,2"/>
        </state_glyph>
       </state>
       <state_glyph node="6,28,34,76">
        <entry box="0,3,6,2"/>
        <exit box="0,5,6,2"/>
       </state_glyph>
      </state>
      <state_glyph node="4,16,38,90">
       <entry box="0,3,6,2"/>
       <exit box="0,5,6,2"/>
      </state_glyph>
     </state>
     <state_glyph node="2,6,42,102">
      <entry box="0,3,6,2"/>
      <exit box="0,5,6,2"/>
     </state_glyph>
    </state>
    <state_diagram size="48,110"/>
   </statechart>
  </class>
  <!--${SFs::TstSM5}-->
  <class name="TstSM5" superclass="qpc::QMsm">
   <!--${SFs::TstSM5::inst}-->
   <attribute name="inst" type="TstSM5" visibility="0x00" properties="0x01"/>
   <!--${SFs::TstSM5::SM}-->
   <statechart properties="0x02">
    <!--${SFs::TstSM5::SM::initial}-->
    <initial target="../1/2/1/3/1/1">
     <action>Q_UNUSED_PAR(par);

QS_OBJ_DICTIONARY(&amp;TstSM2_inst);</action>
     <initial_glyph conn="3,2,5,1,43,56,-12">
      <action box="0,-2,10,2"/>
     </initial_glyph>
    </initial>
    <!--${SFs::TstSM5::SM::s1}-->
    <state name="s1">
     <entry>//</entry>
     <exit>//</exit>
     <!--${SFs::TstSM5::SM::s1::initial}-->
     <initial target="../2">
      <initial_glyph conn="40,12,5,0,-17,4">
       <action box="-4,-2,10,2"/>
      </initial_glyph>
     </initial>
     <!--${SFs::TstSM5::SM::s1::history}-->
     <history type="deep" target="../2/1/3/1/1/1/3">
      <history_glyph conn="44,90,1,1,-14"/>
     </history>
     <!--${SFs::TstSM5::SM::s1::s2}-->
     <state name="s2">
      <entry>//</entry>
      <exit>//</exit>
      <!--${SFs::TstSM5::SM::s1::s2::initial}-->
      <initial target="../1">
       <initial_glyph conn="38,22,5,0,-15,4">
        <action box="0,-2,10,2"/>
       </initial_glyph>
      </initial>
      <!--${SFs::TstSM5::SM::s1::s2::s3}-->
      <state name="s3">
       <entry>//</entry>
       <exit>//</exit>
       <!--${SFs::TstSM5::SM::s1::s2::s3::initial}-->
       <initial target="../3">
        <initial_glyph conn="37,32,5,0,-14,4">
         <action box="0,-2,10,2"/>
        </initial_glyph>
       </initial>
       <!--${SFs::TstSM5::SM::s1::s2::s3::A}-->
       <tran trig="A" target="../../..">
        <tran_glyph conn="14,26,0,0,-22,16,2">
         <action box="0,-2,10,2"/>
        </tran_glyph>
       </tran>
       <!--${SFs::TstSM5::SM::s1::s2::s3::D}-->
       <tran trig="D" target="../../../../2/1/0/0/1">
        <tran_glyph conn="40,80,1,3,18">
         <action box="0,-2,10,2"/>
        </tran_glyph>
       </tran>
       <!--${SFs::TstSM5::SM::s1::s2::s3::s4}-->
       <state name="s4">
        <entry>//</entry>
        <exit>//</exit>
        <!--${SFs::TstSM5::SM::s1::s2::s3::s4::initial}-->
        <initial target="../1">
         <initial_glyph conn="34,42,5,0,-11,4">
          <action box="0,-2,10,2"/>
         </initial_glyph>
        </initial>
        <!--${SFs::TstSM5::SM::s1::s2::s3::s4::s5}-->
        <state name="s5">
         <entry>//</entry>
         <exit>//</exit>
         <!--${SFs::TstSM5::SM::s1::s2::s3::s4::s5::initial}-->
         <initial target="../1">
          <initial_glyph conn="32,52,5,0,-9,4">
           <action box="0,-2,10,2"/>
          </initial_glyph>
         </initial>
         <!--${SFs::TstSM5::SM::s1::s2::s3::s4::s5::s6}-->
         <state name="s6">
          <entry>//</entry>
          <exit>//</exit>
          <!--${SFs::TstSM5::SM::s1::s2::s3::s4::s5::s6::initial}-->
          <initial target="../1">
           <initial_glyph conn="31,66,5,0,-8,4">
            <action box="0,-2,10,2"/>
           </initial_glyph>
          </initial>
          <!--${SFs::TstSM5::SM::s1::s2::s3::s4::s5::s6::s7}-->
          <state name="s7">
           <entry>//</entry>
           <exit>//</exit>
           <!--${SFs::TstSM5::SM::s1::s2::s3::s4::s5::s6::s7::initial}-->
           <initial target="../3">
            <initial_glyph conn="28,76,5,0,-5,4">
             <action box="0,-2,10,2"/>
            </initial_glyph>
           </initial>
           <!--${SFs::TstSM5::SM::s1::s2::s3::s4::s5::s6::s7::H}-->
           <tran trig="H" target="../../../../../../../../2" cpref="../../../../../../../../2/0">
            <tran_glyph conn="32,73,1,3,17">
             <action box="0,-2,10,2"/>
            </tran_glyph>
           </tran>
           <!--${SFs::TstSM5::SM::s1::s2::s3::s4::s5::s6::s7::C}-->
           <tran trig="C" target="../../..">
            <action brief="NULL tran. table">return QM_TRAN((struct QMTranActTable *)0); // NULL tran. table</action>
            <tran_glyph conn="18,70,0,0,-24">
             <action box="0,-10,18,2"/>
            </tran_glyph>
           </tran>
           <!--${SFs::TstSM5::SM::s1::s2::s3::s4::s5::s6::s7::s8}-->
           <state name="s8">
            <entry>//</entry>
            <exit>//</exit>
            <!--${SFs::TstSM5::SM::s1::s2::s3::s4::s5::s6::s7::s8::B}-->
            <tran trig="B" target="../../../../../../../../../2/1/0/0/1/1/0/0/1">
             <tran_glyph conn="30,84,1,3,36">
              <action box="0,-2,10,2"/>
             </tran_glyph>
            </tran>
            <state_glyph node="16,80,14,14">
             <entry box="0,3,6,2"/>
             <exit box="0,5,6,2"/>
            </state_glyph>
           </state>
           <state_glyph node="14,70,18,26">
            <entry box="0,3,6,2"/>
            <exit box="0,5,6,2"/>
           </state_glyph>
          </state>
          <state_glyph node="12,56,22,42">
           <entry box="0,3,6,2"/>
           <exit box="0,5,6,2"/>
          </state_glyph>
         </state>
         <state_glyph node="10,46,26,54">
          <entry box="0,3,6,2"/>
          <exit box="0,5,6,2"/>
         </state_glyph>
        </state>
        <state_glyph node="8,36,30,66">
         <entry box="0,3,6,2"/>
         <exit box="0,5,6,2"/>
        </state_glyph>
       </state>
       <state_glyph node="6,26,34,78">
        <entry box="0,3,6,2"/>
        <exit box="0,5,6,2"/>
       </state_glyph>
      </state>
      <state_glyph node="4,16,38,90">
       <entry box="0,3,6,2"/>
       <exit box="0,5,6,2"/>
      </state_glyph>
     </state>
     <state_glyph node="2,6,42,102">
      <entry box="0,3,6,2"/>
      <exit box="0,5,6,2"/>
     </state_glyph>
    </state>
    <!--${SFs::TstSM5::SM::t1}-->
    <state name="t1">
     <entry>//</entry>
     <exit>//</exit>
     <!--${SFs::TstSM5::SM::t1::history}-->
     <history type="shallow" target="../1/0/0/1/1/0/0/1">
      <history_glyph conn="50,73,3,3,16"/>
     </history>
     <!--${SFs::TstSM5::SM::t1::t2}-->
     <state name="t2">
      <entry>//</entry>
      <exit>//</exit>
      <!--${SFs::TstSM5::SM::t1::t2::t3}-->
      <state name="t3">
       <entry>//</entry>
       <exit>//</exit>
       <!--${SFs::TstSM5::SM::t1::t2::t3::t4}-->
       <state name="t4">
        <entry>//</entry>
        <exit>//</exit>
        <!--${SFs::TstSM5::SM::t1::t2::t3::t4::D}-->
        <tran trig="D" target="../1/1/0/0">
         <tran_glyph conn="86,36,1,0,-12,26">
          <action box="-3,-2,10,2"/>
         </tran_glyph>
        </tran>
        <!--${SFs::TstSM5::SM::t1::t2::t3::t4::t5}-->
        <state name="t5">
         <entry>//</entry>
         <exit>//</exit>
         <!--${SFs::TstSM5::SM::t1::t2::t3::t4::t5::H}-->
         <tran trig="H" target="../../../../../../1" cpref="../../../../../../1/1">
          <tran_glyph conn="58,90,3,1,-13">
           <action box="-2,-2,10,2"/>
          </tran_glyph>
         </tran>
         <!--${SFs::TstSM5::SM::t1::t2::t3::t4::t5::t6}-->
         <state name="t6">
          <entry>//</entry>
          <exit>//</exit>
          <!--${SFs::TstSM5::SM::t1::t2::t3::t4::t5::t6::t7}-->
          <state name="t7">
           <entry>//</entry>
           <exit>//</exit>
           <!--${SFs::TstSM5::SM::t1::t2::t3::t4::t5::t6::t7::t8}-->
           <state name="t8">
            <entry>//</entry>
            <exit>//</exit>
            <!--${SFs::TstSM5::SM::t1::t2::t3::t4::t5::t6::t7::t8::initial}-->
            <initial target="../1">
             <initial_glyph conn="75,67,5,0,-4,3">
              <action box="0,-2,10,2"/>
             </initial_glyph>
            </initial>
            <!--${SFs::TstSM5::SM::t1::t2::t3::t4::t5::t6::t7::t8::t9}-->
            <state name="t9">
             <exit>//</exit>
             <state_glyph color="2" node="66,70,10,22">
              <exit box="0,3,6,2"/>
             </state_glyph>
            </state>
            <state_glyph color="2" node="64,62,14,32">
             <entry box="0,3,6,2"/>
             <exit box="0,5,6,2"/>
            </state_glyph>
           </state>
           <state_glyph color="2" node="62,54,18,42">
            <entry box="0,3,6,2"/>
            <exit box="0,5,6,2"/>
           </state_glyph>
          </state>
          <state_glyph color="2" node="60,46,22,52">
           <entry box="0,3,6,2"/>
           <exit box="0,5,6,2"/>
          </state_glyph>
         </state>
         <state_glyph color="2" node="58,38,26,62">
          <entry box="0,3,6,2"/>
          <exit box="0,5,6,2"/>
         </state_glyph>
        </state>
        <state_glyph color="2" node="56,30,30,72">
         <entry box="0,3,6,2"/>
         <exit box="0,5,6,2"/>
        </state_glyph>
       </state>
       <state_glyph color="2" node="54,22,34,82">
        <entry box="0,3,6,2"/>
        <exit box="0,5,6,2"/>
       </state_glyph>
      </state>
      <state_glyph color="2" node="52,14,38,92">
       <entry box="0,3,6,2"/>
       <exit box="0,5,6,2"/>
      </state_glyph>
     </state>
     <state_glyph color="2" node="50,6,42,102">
      <entry box="0,3,6,2"/>
      <exit box="0,5,6,2"/>
     </state_glyph>
    </state>
    <state_diagram size="96,112"/>
   </statechart>
  </class>
 </package>
 <!--${.}-->
 <directory name=".">
  <!--${.::tstsm.h}-->
  <file name="tstsm.h">
   <text>#ifndef TSTSM_H_
#define TSTSM_H_

$declare ${Shared}

#endif // TSTSM_H_</text>
  </file>
  <!--${.::tstsm.c}-->
  <file name="tstsm.c">
   <text>#include &quot;qpc.h&quot;     // QP/C framework
#include &quot;tstsm.h&quot;   // TstSM state machine

Q_DEFINE_THIS_FILE

$declare ${SMs}

$define ${Shared}
$define ${SMs}</text>
  </file>
  <!--${.::tstsm_sf.h}-->
  <file name="tstsm_sf.h">
   <text>#ifndef TSTSM_SF_H_
#define TSTSM_SF_H_

$declare ${Shared_SF}

#endif // TSTSM_SF_H_</text>
  </file>
  <!--${.::tstsm_sf.c}-->
  <file name="tstsm_sf.c">
   <text>#include &quot;qpc.h&quot;       // QP/C framework
#include &quot;tstsm.h&quot;     // TstSM state machine
#include &quot;tstsm_sf.h&quot;  // TstSM state machine for Safety Functions

Q_DEFINE_THIS_FILE

$declare ${SFs}

$define ${Shared_SF}
$define ${SFs}</text>
  </file>
 </directory>
</model>
