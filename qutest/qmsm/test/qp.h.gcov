        -:    0:Source:../../../../include/qp.h
        -:    0:Graph:build/qep_msm.gcno
        -:    0:Data:build/qep_msm.gcda
        -:    0:Runs:6
        -:    1://$file${include::qp.h} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
        -:    2://
        -:    3:// Model: qpc.qm
        -:    4:// File:  ${include::qp.h}
        -:    5://
        -:    6:// This code has been generated by QM 7.0.0 <www.state-machine.com/qm>.
        -:    7:// DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
        -:    8://
        -:    9:// This code is covered by the following QP license:
        -:   10:// License #    : LicenseRef-QL-dual
        -:   11:// Issued to    : General public
        -:   12:// Framework(s) : qpc
        -:   13:// Support ends : 2025-12-31
        -:   14:// License scope:
        -:   15://
        -:   16:// Copyright (C) 2005 Quantum Leaps, LLC. All rights reserved.
        -:   17://
        -:   18://                    Q u a n t u m  L e a P s
        -:   19://                    ------------------------
        -:   20://                    Modern Embedded Software
        -:   21://
        -:   22:// SPDX-License-Identifier: GPL-3.0-or-later OR LicenseRef-QL-commercial
        -:   23://
        -:   24:// The QP/C software is dual-licensed under the terms of the open-source GNU
        -:   25:// General Public License (GPL) or under the terms of one of the closed-
        -:   26:// source Quantum Leaps commercial licenses.
        -:   27://
        -:   28:// Redistributions in source code must retain this top-level comment block.
        -:   29:// Plagiarizing this software to sidestep the license obligations is illegal.
        -:   30://
        -:   31:// NOTE:
        -:   32:// The GPL (see <www.gnu.org/licenses/gpl-3.0>) does NOT permit the
        -:   33:// incorporation of the QP/C software into proprietary programs. Please
        -:   34:// contact Quantum Leaps for commercial licensing options, which expressly
        -:   35:// supersede the GPL and are designed explicitly for licensees interested
        -:   36:// in using QP/C in closed-source proprietary applications.
        -:   37://
        -:   38:// Quantum Leaps contact information:
        -:   39:// <www.state-machine.com/licensing>
        -:   40:// <info@state-machine.com>
        -:   41://
        -:   42://$endhead${include::qp.h} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        -:   43:#ifndef QP_H_
        -:   44:#define QP_H_
        -:   45:
        -:   46://============================================================================
        -:   47:#define QP_VERSION_STR "7.5.0-alpha"
        -:   48:#define QP_VERSION     750U
        -:   49:#define QP_RELEASE     0x7064FCF1U
        -:   50:
        -:   51://============================================================================
        -:   52://! @cond INTERNAL
        -:   53:
        -:   54:#ifndef Q_SIGNAL_SIZE
        -:   55:#define Q_SIGNAL_SIZE 2U
        -:   56:#endif
        -:   57:
        -:   58:#ifndef QF_MAX_ACTIVE
        -:   59:#define QF_MAX_ACTIVE 32U
        -:   60:#endif
        -:   61:
        -:   62:#if (QF_MAX_ACTIVE > 64U)
        -:   63:#error QF_MAX_ACTIVE exceeds the maximum of 64U;
        -:   64:#endif
        -:   65:
        -:   66:#ifndef QF_MAX_TICK_RATE
        -:   67:#define QF_MAX_TICK_RATE 1U
        -:   68:#endif
        -:   69:
        -:   70:#if (QF_MAX_TICK_RATE > 15U)
        -:   71:#error QF_MAX_TICK_RATE exceeds the maximum of 15U;
        -:   72:#endif
        -:   73:
        -:   74:#ifndef QF_MAX_EPOOL
        -:   75:#define QF_MAX_EPOOL 3U
        -:   76:#endif
        -:   77:
        -:   78:#if (QF_MAX_EPOOL > 15U)
        -:   79:#error QF_MAX_EPOOL exceeds the maximum of 15U;
        -:   80:#endif
        -:   81:
        -:   82:#ifndef QF_TIMEEVT_CTR_SIZE
        -:   83:#define QF_TIMEEVT_CTR_SIZE 4U
        -:   84:#endif
        -:   85:
        -:   86:#if (QF_TIMEEVT_CTR_SIZE > 4U)
        -:   87:#error QF_TIMEEVT_CTR_SIZE defined incorrectly, expected 1U, 2U, or 4U;
        -:   88:#endif
        -:   89:
        -:   90:#ifndef QF_EVENT_SIZ_SIZE
        -:   91:#define QF_EVENT_SIZ_SIZE 2U
        -:   92:#endif
        -:   93:
        -:   94:#if (QF_EVENT_SIZ_SIZE > 4U)
        -:   95:#error QF_EVENT_SIZ_SIZE defined incorrectly, expected 1U, 2U, or 4U;
        -:   96:#endif
        -:   97:
        -:   98://! @endcond
        -:   99://============================================================================
        -:  100:
        -:  101://$declare${glob-types} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
        -:  102:
        -:  103://${glob-types::int_t} .......................................................
        -:  104:typedef int int_t;
        -:  105:
        -:  106://${glob-types::enum_t} ......................................................
        -:  107:typedef int enum_t;
        -:  108:
        -:  109://${glob-types::float32_t} ...................................................
        -:  110:typedef float float32_t;
        -:  111:
        -:  112://${glob-types::float64_t} ...................................................
        -:  113:typedef double float64_t;
        -:  114://$enddecl${glob-types} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        -:  115:
        -:  116://$declare${QEP} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
        -:  117:
        -:  118://${QEP::QP_versionStr[16]} ..................................................
        -:  119://! the current QP version number string in ROM, based on #QP_VERSION_STR
        -:  120:extern char const QP_versionStr[16];
        -:  121:
        -:  122://${QEP::QSignal} ............................................................
        -:  123:#if (Q_SIGNAL_SIZE == 1U)
        -:  124:typedef uint8_t QSignal;
        -:  125:#endif //  (Q_SIGNAL_SIZE == 1U)
        -:  126:
        -:  127://${QEP::QSignal} ............................................................
        -:  128:#if (Q_SIGNAL_SIZE == 2U)
        -:  129:typedef uint16_t QSignal;
        -:  130:#endif //  (Q_SIGNAL_SIZE == 2U)
        -:  131:
        -:  132://${QEP::QSignal} ............................................................
        -:  133:#if (Q_SIGNAL_SIZE == 4U)
        -:  134:typedef uint32_t QSignal;
        -:  135:#endif //  (Q_SIGNAL_SIZE == 4U)
        -:  136:
        -:  137://${QEP::QEVT_MARKER} ........................................................
        -:  138:#define QEVT_MARKER 0xE0U
        -:  139:
        -:  140://${QEP::QEVT_DYNAMIC} .......................................................
        -:  141:#define QEVT_DYNAMIC 0U
        -:  142:
        -:  143://${QEP::QEvt} ...............................................................
        -:  144://! @class QEvt
        -:  145:typedef struct QEvt {
        -:  146:// public:
        -:  147:
        -:  148:    //! @public @memberof QEvt
        -:  149:    QSignal sig;
        -:  150:
        -:  151:// private:
        -:  152:
        -:  153:    //! @private @memberof QEvt
        -:  154:    uint8_t volatile refCtr_;
        -:  155:
        -:  156:    //! @private @memberof QEvt
        -:  157:    uint8_t evtTag_;
        -:  158:} QEvt;
        -:  159:
        -:  160:extern QEvt const QEvt_reserved_[4];
        -:  161:
        -:  162:// public:
        -:  163:
        -:  164://! @public @memberof QEvt
        -:  165:static inline void QEvt_ctor(QEvt * const me,
        -:  166:    enum_t const sig)
        -:  167:{
        -:  168:    me->sig     = (QSignal)sig;
        -:  169:    me->refCtr_ = 0U;
        -:  170:    me->evtTag_ = QEVT_MARKER;
        -:  171:}
        -:  172:
        -:  173://! @public @memberof QEvt
        -:  174:static inline QEvt * QEvt_init(QEvt * const me,
        -:  175:    uint8_t dummy)
        -:  176:{
        -:  177:    (void)dummy;
        -:  178:    return me;
        -:  179:}
        -:  180:
        -:  181:// private:
        -:  182:
        -:  183://! @private @memberof QEvt
       41:  184:static inline bool QEvt_verify_(QEvt const * const me) {
       41:  185:    return (me != (QEvt const *)0)
       41:  186:           && ((me->evtTag_ & 0xF0U) == QEVT_MARKER);
        -:  187:}
        -:  188:
        -:  189://! @private @memberof QEvt
        -:  190:static inline uint_fast8_t QEvt_getPoolNum_(QEvt const * const me) {
        -:  191:    return (uint_fast8_t)me->evtTag_ & 0x0FU;
        -:  192:}
        -:  193:
        -:  194://${QEP::QStateRet} ..........................................................
        -:  195://! All possible values returned from state/action handlers
        -:  196://! @note
        -:  197://! The order of enumeration matters for algorithmic correctness.
        -:  198:enum QStateRet {
        -:  199:    // unhandled and need to "bubble up"
        -:  200:    Q_RET_SUPER,     //!< event passed to superstate to handle
        -:  201:    Q_RET_UNHANDLED, //!< event unhandled due to guard
        -:  202:
        -:  203:    // handled and do not need to "bubble up"
        -:  204:    Q_RET_HANDLED,   //!< event handled (internal transition)
        -:  205:    Q_RET_IGNORED,   //!< event silently ignored (bubbled up to top)
        -:  206:
        -:  207:    // entry/exit
        -:  208:    Q_RET_ENTRY,     //!< state entry action executed
        -:  209:    Q_RET_EXIT,      //!< state exit  action executed
        -:  210:
        -:  211:    // no side effects
        -:  212:    Q_RET_NULL,      //!< return value without any effect
        -:  213:
        -:  214:    // transitions need to execute transition-action table in ::QMsm
        -:  215:    Q_RET_TRAN,      //!< regular transition
        -:  216:    Q_RET_TRAN_INIT, //!< initial transition in a state
        -:  217:
        -:  218:    // transitions that additionally clobber me->state
        -:  219:    Q_RET_TRAN_HIST, //!< transition to history of a given state
        -:  220:};
        -:  221:
        -:  222://${QEP::QState} .............................................................
        -:  223:typedef enum QStateRet QState;
        -:  224:
        -:  225://${QEP::QStateHandler} ......................................................
        -:  226:typedef QState (* QStateHandler )(void * const me, QEvt const * const e);
        -:  227:
        -:  228://${QEP::QActionHandler} .....................................................
        -:  229:typedef QState (* QActionHandler )(void * const me);
        -:  230:
        -:  231://${QEP::QXThread} ...........................................................
        -:  232:// forward declaration
        -:  233:struct QXThread;
        -:  234:
        -:  235://${QEP::QXThreadHandler} ....................................................
        -:  236:typedef void (* QXThreadHandler )(struct QXThread * const me);
        -:  237:
        -:  238://${QEP::QMState} ............................................................
        -:  239:typedef struct QMState {
        -:  240:    struct QMState const *superstate; //!< @private @memberof QMState
        -:  241:    QStateHandler const stateHandler; //!< @private @memberof QMState
        -:  242:    QActionHandler const entryAction; //!< @private @memberof QMState
        -:  243:    QActionHandler const exitAction;  //!< @private @memberof QMState
        -:  244:    QActionHandler const initAction;  //!< @private @memberof QMState
        -:  245:} QMState;
        -:  246:
        -:  247://${QEP::QMTranActTable} .....................................................
        -:  248:typedef struct QMTranActTable {
        -:  249:    QMState const *target;       //!< @private @memberof QMTranActTable
        -:  250:    QActionHandler const act[1]; //!< @private @memberof QMTranActTable
        -:  251:} QMTranActTable;
        -:  252:
        -:  253://${QEP::QReservedSig} .......................................................
        -:  254://! Reserved signals by the QHsm-style state machine implementation
        -:  255:enum QReservedSig {
        -:  256:    Q_EMPTY_SIG,     //!< signal to execute the default case
        -:  257:    Q_ENTRY_SIG,     //!< signal for coding entry actions
        -:  258:    Q_EXIT_SIG,      //!< signal for coding exit actions
        -:  259:    Q_INIT_SIG,      //!< signal for coding initial transitions
        -:  260:    Q_USER_SIG       //!< offset for the user signals (QP Application)
        -:  261:};
        -:  262:
        -:  263://${QEP::QAsmAttr} ...........................................................
        -:  264:union QAsmAttr {
        -:  265:    QStateHandler   fun;         //!< @private @memberof QAsmAttr
        -:  266:    QActionHandler  act;         //!< @private @memberof QAsmAttr
        -:  267:    QXThreadHandler thr;         //!< @private @memberof QAsmAttr
        -:  268:    QMTranActTable const *tatbl; //!< @private @memberof QAsmAttr
        -:  269:    struct QMState const *obj;   //!< @private @memberof QAsmAttr
        -:  270:#ifndef Q_UNSAFE
        -:  271:    uintptr_t      uint;         //!< @private @memberof QAsmAttr
        -:  272:#endif
        -:  273:};
        -:  274:
        -:  275://${QEP::QAsm} ...............................................................
        -:  276://! @class QAsm
        -:  277:typedef struct {
        -:  278:// private:
        -:  279:
        -:  280:    //! @protected @memberof QAsm
        -:  281:    struct QAsmVtable const * vptr;
        -:  282:
        -:  283:// protected:
        -:  284:
        -:  285:    //! @protected @memberof QAsm
        -:  286:    union QAsmAttr state;
        -:  287:
        -:  288:    //! @protected @memberof QAsm
        -:  289:    union QAsmAttr temp;
        -:  290:} QAsm;
        -:  291:
        -:  292:// protected:
        -:  293:
        -:  294://! @protected @memberof QAsm
        -:  295:void QAsm_ctor(QAsm * const me);
        -:  296:
        -:  297://${QEP::QAsmVtable} .........................................................
        -:  298:struct QAsmVtable {
        -:  299:    void (*init)(QAsm * const me, void const * const e,
        -:  300:                 uint_fast8_t const qsId);
        -:  301:    void (*dispatch)(QAsm * const me, QEvt const * const e,
        -:  302:                     uint_fast8_t const qsId);
        -:  303:    bool (*isIn)(QAsm * const me, QStateHandler const s);
        -:  304:
        -:  305:#ifdef Q_SPY
        -:  306:    QStateHandler (*getStateHandler)(QAsm * const me);
        -:  307:#endif // Q_SPY
        -:  308:};
        -:  309:
        -:  310://${QEP::QHsm} ...............................................................
        -:  311://! @class QHsm
        -:  312://! @extends QAsm
        -:  313:typedef struct {
        -:  314:// protected:
        -:  315:    QAsm super;
        -:  316:} QHsm;
        -:  317:
        -:  318:// protected:
        -:  319:
        -:  320://! @protected @memberof QHsm
        -:  321:void QHsm_ctor(QHsm * const me,
        -:  322:    QStateHandler const initial);
        -:  323:
        -:  324:// private:
        -:  325:
        -:  326://! @private @memberof QHsm
        -:  327:void QHsm_init_(
        -:  328:    QAsm * const me,
        -:  329:    void const * const e,
        -:  330:    uint_fast8_t const qsId);
        -:  331:
        -:  332://! @private @memberof QHsm
        -:  333:void QHsm_dispatch_(
        -:  334:    QAsm * const me,
        -:  335:    QEvt const * const e,
        -:  336:    uint_fast8_t const qsId);
        -:  337:
        -:  338:#ifdef Q_SPY
        -:  339://! @private @memberof QHsm
        -:  340:QStateHandler QHsm_getStateHandler_(QAsm * const me);
        -:  341:#endif // def Q_SPY
        -:  342:
        -:  343:// public:
        -:  344:
        -:  345://! @private @memberof QHsm
        -:  346:bool QHsm_isIn_(
        -:  347:    QAsm * const me,
        -:  348:    QStateHandler const state);
        -:  349:
        -:  350://! @public @memberof QHsm
        -:  351:static inline QStateHandler QHsm_state(QHsm const * const me) {
        -:  352:    return me->super.state.fun;
        -:  353:}
        -:  354:
        -:  355://! @public @memberof QHsm
        -:  356:QStateHandler QHsm_childState(QHsm * const me,
        -:  357:    QStateHandler const parent);
        -:  358:
        -:  359:// private:
        -:  360:
        -:  361://! @private @memberof QHsm
        -:  362:int_fast8_t QHsm_tran_(
        -:  363:    QAsm * const me,
        -:  364:    QStateHandler * const path,
        -:  365:    uint_fast8_t const qsId);
        -:  366:
        -:  367:// protected:
        -:  368:
        -:  369://! @protected @memberof QAsm
        -:  370:QState QHsm_top(QHsm const * const me,
        -:  371:    QEvt const * const e);
        -:  372:
        -:  373://${QEP::QMsm} ...............................................................
        -:  374://! @class QMsm
        -:  375://! @extends QAsm
        -:  376:typedef struct {
        -:  377:// protected:
        -:  378:    QAsm super;
        -:  379:} QMsm;
        -:  380:
        -:  381:// protected:
        -:  382:
        -:  383://! @protected @memberof QMsm
        -:  384:void QMsm_ctor(QMsm * const me,
        -:  385:    QStateHandler const initial);
        -:  386:
        -:  387:// public:
        -:  388:
        -:  389://! @private @memberof QMsm
        -:  390:void QMsm_init_(
        -:  391:    QAsm * const me,
        -:  392:    void const * const e,
        -:  393:    uint_fast8_t const qsId);
        -:  394:
        -:  395:// private:
        -:  396:
        -:  397://! @private @memberof QMsm
        -:  398:void QMsm_dispatch_(
        -:  399:    QAsm * const me,
        -:  400:    QEvt const * const e,
        -:  401:    uint_fast8_t const qsId);
        -:  402:
        -:  403:// public:
        -:  404:
        -:  405:#ifdef Q_SPY
        -:  406://! @public @memberof QMsm
    #####:  407:static inline QStateHandler QMsm_getStateHandler_(QAsm * const me) {
    #####:  408:    return me->state.obj->stateHandler;
        -:  409:}
        -:  410:#endif // def Q_SPY
        -:  411:
        -:  412://! @private @memberof QMsm
        -:  413:bool QMsm_isIn_(
        -:  414:    QAsm * const me,
        -:  415:    QStateHandler const state);
        -:  416:
        -:  417://! @public @memberof QMsm
        -:  418:static inline QMState const * QMsm_stateObj(QMsm const * const me) {
        -:  419:    return me->super.state.obj;
        -:  420:}
        -:  421:
        -:  422://! @public @memberof QMsm
        -:  423:QMState const * QMsm_childStateObj(QMsm const * const me,
        -:  424:    QMState const * const parent);
        -:  425:
        -:  426:// private:
        -:  427:
        -:  428://! @private @memberof QMsm
        -:  429:QState QMsm_execTatbl_(
        -:  430:    QAsm * const me,
        -:  431:    QMTranActTable const * const tatbl,
        -:  432:    uint_fast8_t const qsId);
        -:  433:
        -:  434://! @private @memberof QMsm
        -:  435:void QMsm_exitToTranSource_(
        -:  436:    QAsm * const me,
        -:  437:    QMState const * const cs,
        -:  438:    QMState const * const ts,
        -:  439:    uint_fast8_t const qsId);
        -:  440:
        -:  441://! @private @memberof QMsm
        -:  442:QState QMsm_enterHistory_(
        -:  443:    QAsm * const me,
        -:  444:    QMState const *const hist,
        -:  445:    uint_fast8_t const qsId);
        -:  446://$enddecl${QEP} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        -:  447:
        -:  448://$declare${QEP-macros} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
        -:  449:
        -:  450://${QEP-macros::QEVT_INITIALIZER} ............................................
        -:  451:#define QEVT_INITIALIZER(sig_) { (QSignal)(sig_), 0U, QEVT_MARKER }
        -:  452:
        -:  453://${QEP-macros::QASM_INIT} ...................................................
        -:  454:#ifdef Q_SPY
        -:  455:#define QASM_INIT(me_, par_, qsId_) do { \
        -:  456:    Q_ASSERT(((QAsm *)(me_))->vptr); \
        -:  457:    (*((QAsm *)(me_))->vptr->init)((QAsm *)(me_), (par_), (qsId_)); \
        -:  458:} while (false)
        -:  459:#endif // def Q_SPY
        -:  460:
        -:  461://${QEP-macros::QASM_INIT} ...................................................
        -:  462:#ifndef Q_SPY
        -:  463:#define QASM_INIT(me_, par_, dummy) do { \
        -:  464:    Q_ASSERT(((QAsm *)(me_))->vptr); \
        -:  465:    (*((QAsm *)(me_))->vptr->init)((QAsm *)(me_), (par_), 0); \
        -:  466:} while (false)
        -:  467:#endif // ndef Q_SPY
        -:  468:
        -:  469://${QEP-macros::QASM_DISPATCH} ...............................................
        -:  470:#ifdef Q_SPY
        -:  471:#define QASM_DISPATCH(me_, e_, qsId_) \
        -:  472:    (*((QAsm *)(me_))->vptr->dispatch)((QAsm *)(me_), (e_), (qsId_))
        -:  473:#endif // def Q_SPY
        -:  474:
        -:  475://${QEP-macros::QASM_DISPATCH} ...............................................
        -:  476:#ifndef Q_SPY
        -:  477:#define QASM_DISPATCH(me_, e_, dummy) \
        -:  478:    (*((QAsm *)(me_))->vptr->dispatch)((QAsm *)(me_), (e_), 0U)
        -:  479:#endif // ndef Q_SPY
        -:  480:
        -:  481://${QEP-macros::QASM_IS_IN} ..................................................
        -:  482:#define QASM_IS_IN(me_, state_) \
        -:  483:    (*((QAsm *)(me_))->vptr->isIn)((QAsm *)(me_), (state_))
        -:  484:
        -:  485://${QEP-macros::Q_ASM_UPCAST} ................................................
        -:  486:#define Q_ASM_UPCAST(ptr_) ((QAsm *)(ptr_))
        -:  487:
        -:  488://${QEP-macros::Q_HSM_UPCAST} ................................................
        -:  489:#define Q_HSM_UPCAST(ptr_) ((QHsm *)(ptr_))
        -:  490:
        -:  491://${QEP-macros::Q_MSM_UPCAST} ................................................
        -:  492:#define Q_MSM_UPCAST(ptr_) ((QMsm *)(ptr_))
        -:  493:
        -:  494://${QEP-macros::Q_TRAN} ......................................................
        -:  495:#define Q_TRAN(target_) \
        -:  496:    ((Q_ASM_UPCAST(me))->temp.fun = Q_STATE_CAST(target_), \
        -:  497:     (QState)Q_RET_TRAN)
        -:  498:
        -:  499://${QEP-macros::Q_TRAN_HIST} .................................................
        -:  500:#define Q_TRAN_HIST(hist_) \
        -:  501:    ((Q_ASM_UPCAST(me))->temp.fun = (hist_), \
        -:  502:     (QState)Q_RET_TRAN_HIST)
        -:  503:
        -:  504://${QEP-macros::Q_SUPER} .....................................................
        -:  505:#define Q_SUPER(super_) \
        -:  506:    ((Q_ASM_UPCAST(me))->temp.fun = Q_STATE_CAST(super_), \
        -:  507:     (QState)Q_RET_SUPER)
        -:  508:
        -:  509://${QEP-macros::Q_HANDLED} ...................................................
        -:  510:#define Q_HANDLED() ((QState)Q_RET_HANDLED)
        -:  511:
        -:  512://${QEP-macros::Q_UNHANDLED} .................................................
        -:  513:#define Q_UNHANDLED() ((QState)Q_RET_UNHANDLED)
        -:  514:
        -:  515://${QEP-macros::Q_ACTION_NULL} ...............................................
        -:  516:#define Q_ACTION_NULL ((QActionHandler)0)
        -:  517:
        -:  518://${QEP-macros::Q_EVT_CAST} ..................................................
        -:  519:#define Q_EVT_CAST(class_) ((class_ const *)(e))
        -:  520:
        -:  521://${QEP-macros::Q_STATE_CAST} ................................................
        -:  522:#define Q_STATE_CAST(handler_) ((QStateHandler)(handler_))
        -:  523:
        -:  524://${QEP-macros::Q_ACTION_CAST} ...............................................
        -:  525:#define Q_ACTION_CAST(action_) ((QActionHandler)(action_))
        -:  526:
        -:  527://${QEP-macros::Q_UNUSED_PAR} ................................................
        -:  528:#define Q_UNUSED_PAR(par_) ((void)(par_))
        -:  529:
        -:  530://${QEP-macros::Q_DIM} .......................................................
        -:  531:#define Q_DIM(array_) (sizeof(array_) / sizeof((array_)[0U]))
        -:  532:
        -:  533://${QEP-macros::Q_UINT2PTR_CAST} .............................................
        -:  534:#define Q_UINT2PTR_CAST(type_, uint_) ((type_ *)(uint_))
        -:  535:
        -:  536://${QEP-macros::QM_ENTRY} ....................................................
        -:  537:#ifdef Q_SPY
        -:  538:#define QM_ENTRY(state_) \
        -:  539:    ((Q_ASM_UPCAST(me))->temp.obj = (state_), \
        -:  540:     (QState)Q_RET_ENTRY)
        -:  541:#endif // def Q_SPY
        -:  542:
        -:  543://${QEP-macros::QM_ENTRY} ....................................................
        -:  544:#ifndef Q_SPY
        -:  545:#define QM_ENTRY(dummy) ((QState)Q_RET_ENTRY)
        -:  546:#endif // ndef Q_SPY
        -:  547:
        -:  548://${QEP-macros::QM_EXIT} .....................................................
        -:  549:#ifdef Q_SPY
        -:  550:#define QM_EXIT(state_) \
        -:  551:    ((Q_ASM_UPCAST(me))->temp.obj = (state_), \
        -:  552:     (QState)Q_RET_EXIT)
        -:  553:#endif // def Q_SPY
        -:  554:
        -:  555://${QEP-macros::QM_EXIT} .....................................................
        -:  556:#ifndef Q_SPY
        -:  557:#define QM_EXIT(dummy) ((QState)Q_RET_EXIT)
        -:  558:#endif // ndef Q_SPY
        -:  559:
        -:  560://${QEP-macros::QM_SM_EXIT} ..................................................
        -:  561:#define QM_SM_EXIT(state_) \
        -:  562:    ((Q_ASM_UPCAST(me))->temp.obj = (state_), \
        -:  563:     (QState)Q_RET_EXIT)
        -:  564:
        -:  565://${QEP-macros::QM_TRAN} .....................................................
        -:  566:#define QM_TRAN(tatbl_) ((Q_ASM_UPCAST(me))->temp.tatbl \
        -:  567:    = (struct QMTranActTable const *)(tatbl_), \
        -:  568: (QState)Q_RET_TRAN)
        -:  569:
        -:  570://${QEP-macros::QM_TRAN_INIT} ................................................
        -:  571:#define QM_TRAN_INIT(tatbl_) ((Q_ASM_UPCAST(me))->temp.tatbl \
        -:  572:    = (struct QMTranActTable const *)(tatbl_), \
        -:  573: (QState)Q_RET_TRAN_INIT)
        -:  574:
        -:  575://${QEP-macros::QM_TRAN_HIST} ................................................
        -:  576:#define QM_TRAN_HIST(history_, tatbl_) \
        -:  577:    ((((Q_ASM_UPCAST(me))->state.obj  = (history_)), \
        -:  578:      ((Q_ASM_UPCAST(me))->temp.tatbl = \
        -:  579:          (struct QMTranActTable const *)(tatbl_))), \
        -:  580:     (QState)Q_RET_TRAN_HIST)
        -:  581:
        -:  582://${QEP-macros::QM_HANDLED} ..................................................
        -:  583:#define QM_HANDLED() ((QState)Q_RET_HANDLED)
        -:  584:
        -:  585://${QEP-macros::QM_UNHANDLED} ................................................
        -:  586:#define QM_UNHANDLED() ((QState)Q_RET_UNHANDLED)
        -:  587:
        -:  588://${QEP-macros::QM_SUPER} ....................................................
        -:  589:#define QM_SUPER() ((QState)Q_RET_SUPER)
        -:  590:
        -:  591://${QEP-macros::QM_STATE_NULL} ...............................................
        -:  592:#define QM_STATE_NULL ((QMState *)0)
        -:  593://$enddecl${QEP-macros} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        -:  594:
        -:  595://$declare${QF::types} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
        -:  596:
        -:  597://${QF::types::QPrioSpec} ....................................................
        -:  598:typedef uint16_t QPrioSpec;
        -:  599:
        -:  600://${QF::types::QTimeEvtCtr} ..................................................
        -:  601:#if (QF_TIMEEVT_CTR_SIZE == 1U)
        -:  602:typedef uint8_t QTimeEvtCtr;
        -:  603:#endif //  (QF_TIMEEVT_CTR_SIZE == 1U)
        -:  604:
        -:  605://${QF::types::QTimeEvtCtr} ..................................................
        -:  606:#if (QF_TIMEEVT_CTR_SIZE == 2U)
        -:  607:typedef uint16_t QTimeEvtCtr;
        -:  608:#endif //  (QF_TIMEEVT_CTR_SIZE == 2U)
        -:  609:
        -:  610://${QF::types::QTimeEvtCtr} ..................................................
        -:  611:#if (QF_TIMEEVT_CTR_SIZE == 4U)
        -:  612:typedef uint32_t QTimeEvtCtr;
        -:  613:#endif //  (QF_TIMEEVT_CTR_SIZE == 4U)
        -:  614:
        -:  615://${QF::types::QPSetBits} ....................................................
        -:  616:#if (QF_MAX_ACTIVE <= 8U)
        -:  617:typedef uint8_t QPSetBits;
        -:  618:#endif //  (QF_MAX_ACTIVE <= 8U)
        -:  619:
        -:  620://${QF::types::QPSetBits} ....................................................
        -:  621:#if (8U < QF_MAX_ACTIVE) && (QF_MAX_ACTIVE <= 16U)
        -:  622:typedef uint16_t QPSetBits;
        -:  623:#endif //  (8U < QF_MAX_ACTIVE) && (QF_MAX_ACTIVE <= 16U)
        -:  624:
        -:  625://${QF::types::QPSetBits} ....................................................
        -:  626:#if (16U < QF_MAX_ACTIVE)
        -:  627:typedef uint32_t QPSetBits;
        -:  628:#endif //  (16U < QF_MAX_ACTIVE)
        -:  629:
        -:  630://${QF::types::QF_LOG2} ......................................................
        -:  631:#ifndef QF_LOG2
        -:  632:uint_fast8_t QF_LOG2(QPSetBits const bitmask);
        -:  633:#endif // ndef QF_LOG2
        -:  634:
        -:  635://${QF::types::QPSet} ........................................................
        -:  636://! @class QPSet
        -:  637:typedef struct {
        -:  638:// private:
        -:  639:
        -:  640:    //! @private @memberof QPSet
        -:  641:    QPSetBits bits[((QF_MAX_ACTIVE + (8U*sizeof(QPSetBits))) - 1U)/(8U*sizeof(QPSetBits))];
        -:  642:} QPSet;
        -:  643:
        -:  644:// public:
        -:  645:
        -:  646://! @public @memberof QPSet
        -:  647:static inline void QPSet_setEmpty(QPSet * const me) {
        -:  648:    me->bits[0] = 0U;
        -:  649:    #if (QF_MAX_ACTIVE > 32)
        -:  650:    me->bits[1] = 0U;
        -:  651:    #endif
        -:  652:}
        -:  653:
        -:  654://! @public @memberof QPSet
        -:  655:static inline bool QPSet_isEmpty(QPSet const * const me) {
        -:  656:    #if (QF_MAX_ACTIVE <= 32U)
        -:  657:    return (me->bits[0] == 0U);
        -:  658:    #else
        -:  659:    return (me->bits[0] == 0U) ? (me->bits[1] == 0U) : false;
        -:  660:    #endif
        -:  661:}
        -:  662:
        -:  663://! @public @memberof QPSet
        -:  664:static inline bool QPSet_notEmpty(QPSet const * const me) {
        -:  665:    #if (QF_MAX_ACTIVE <= 32U)
        -:  666:    return (me->bits[0] != 0U);
        -:  667:    #else
        -:  668:    return (me->bits[0] != 0U) ? true : (me->bits[1] != 0U);
        -:  669:    #endif
        -:  670:}
        -:  671:
        -:  672://! @public @memberof QPSet
        -:  673:static inline bool QPSet_hasElement(QPSet const * const me,
        -:  674:    uint_fast8_t const n)
        -:  675:{
        -:  676:    #if (QF_MAX_ACTIVE <= 32U)
        -:  677:    return (me->bits[0] & ((QPSetBits)1U << (n - 1U))) != 0U;
        -:  678:    #else
        -:  679:    return (n <= 32U)
        -:  680:        ? ((me->bits[0] & ((QPSetBits)1U << (n - 1U)))  != 0U)
        -:  681:        : ((me->bits[1] & ((QPSetBits)1U << (n - 33U))) != 0U);
        -:  682:    #endif
        -:  683:}
        -:  684:
        -:  685://! @public @memberof QPSet
        -:  686:static inline void QPSet_insert(QPSet * const me,
        -:  687:    uint_fast8_t const n)
        -:  688:{
        -:  689:    #if (QF_MAX_ACTIVE <= 32U)
        -:  690:    me->bits[0] = (me->bits[0] | ((QPSetBits)1U << (n - 1U)));
        -:  691:    #else
        -:  692:    if (n <= 32U) {
        -:  693:        me->bits[0] = (me->bits[0] | ((QPSetBits)1U << (n - 1U)));
        -:  694:    }
        -:  695:    else {
        -:  696:        me->bits[1] = (me->bits[1] | ((QPSetBits)1U << (n - 33U)));
        -:  697:    }
        -:  698:    #endif
        -:  699:}
        -:  700:
        -:  701://! @public @memberof QPSet
        -:  702:static inline void QPSet_remove(QPSet * const me,
        -:  703:    uint_fast8_t const n)
        -:  704:{
        -:  705:    #if (QF_MAX_ACTIVE <= 32U)
        -:  706:    me->bits[0] = (me->bits[0] & (QPSetBits)(~((QPSetBits)1U << (n - 1U))));
        -:  707:    #else
        -:  708:    if (n <= 32U) {
        -:  709:        (me->bits[0] = (me->bits[0] & ~((QPSetBits)1U << (n - 1U))));
        -:  710:    }
        -:  711:    else {
        -:  712:        (me->bits[1] = (me->bits[1] & ~((QPSetBits)1U << (n - 33U))));
        -:  713:    }
        -:  714:    #endif
        -:  715:}
        -:  716:
        -:  717://! @public @memberof QPSet
        -:  718:static inline uint_fast8_t QPSet_findMax(QPSet const * const me) {
        -:  719:    #if (QF_MAX_ACTIVE <= 32U)
        -:  720:    return QF_LOG2(me->bits[0]);
        -:  721:    #else
        -:  722:    return (me->bits[1] != 0U)
        -:  723:        ? (QF_LOG2(me->bits[1]) + 32U)
        -:  724:        : (QF_LOG2(me->bits[0]));
        -:  725:    #endif
        -:  726:}
        -:  727:
        -:  728:// private:
        -:  729:
        -:  730:#ifndef Q_UNSAFE
        -:  731://! @private @memberof QPSet
        -:  732:static inline void QPSet_update_(QPSet const * const me,
        -:  733:    QPSet * const dis)
        -:  734:{
        -:  735:    dis->bits[0] = ~me->bits[0];
        -:  736:    #if (QF_MAX_ACTIVE > 32U)
        -:  737:    dis->bits[1] = ~me->bits[1];
        -:  738:    #endif
        -:  739:}
        -:  740:#endif // ndef Q_UNSAFE
        -:  741:
        -:  742:#ifndef Q_UNSAFE
        -:  743://! @private @memberof QPSet
        -:  744:static inline bool QPSet_verify_(QPSet const * const me,
        -:  745:    QPSet const * const dis)
        -:  746:{
        -:  747:    #if (QF_MAX_ACTIVE <= 32U)
        -:  748:    return me->bits[0] == (QPSetBits)(~dis->bits[0]);
        -:  749:    #else
        -:  750:    return (me->bits[0] == (QPSetBits)(~dis->bits[0]))
        -:  751:           && (me->bits[1] == (QPSetBits)(~dis->bits[1]));
        -:  752:    #endif
        -:  753:}
        -:  754:#endif // ndef Q_UNSAFE
        -:  755:
        -:  756://${QF::types::QSubscrList} ..................................................
        -:  757:// @struct QSubscrList
        -:  758:typedef struct {
        -:  759:// private:
        -:  760:
        -:  761:    //! @private @memberof QSubscrList
        -:  762:    QPSet set;
        -:  763:
        -:  764:#ifndef Q_UNSAFE
        -:  765:    //! @private @memberof QSubscrList
        -:  766:    QPSet set_dis;
        -:  767:#endif // ndef Q_UNSAFE
        -:  768:} QSubscrList;
        -:  769:
        -:  770://${QF::types::QEQueue} ......................................................
        -:  771:struct QEQueue;
        -:  772://$enddecl${QF::types} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        -:  773:
        -:  774://$declare${QF::QActive} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
        -:  775:
        -:  776://${QF::QActive} .............................................................
        -:  777://! @class QActive
        -:  778://! @extends QAsm
        -:  779:typedef struct QActive {
        -:  780:// protected:
        -:  781:    QAsm super;
        -:  782:
        -:  783:    //! @protected @memberof QActive
        -:  784:    uint8_t prio;
        -:  785:
        -:  786:    //! @protected @memberof QActive
        -:  787:    uint8_t pthre;
        -:  788:
        -:  789:#ifdef QACTIVE_THREAD_TYPE
        -:  790:    //! @protected @memberof QActive
        -:  791:    QACTIVE_THREAD_TYPE thread;
        -:  792:#endif // def QACTIVE_THREAD_TYPE
        -:  793:
        -:  794:#ifdef QACTIVE_OS_OBJ_TYPE
        -:  795:    //! @protected @memberof QActive
        -:  796:    QACTIVE_OS_OBJ_TYPE osObject;
        -:  797:#endif // def QACTIVE_OS_OBJ_TYPE
        -:  798:
        -:  799:#ifdef QACTIVE_EQUEUE_TYPE
        -:  800:    //! @protected @memberof QActive
        -:  801:    QACTIVE_EQUEUE_TYPE eQueue;
        -:  802:#endif // def QACTIVE_EQUEUE_TYPE
        -:  803:
        -:  804:#ifndef Q_UNSAFE
        -:  805:    //! @protected @memberof QActive
        -:  806:    uint8_t prio_dis;
        -:  807:#endif // ndef Q_UNSAFE
        -:  808:
        -:  809:#ifndef Q_UNSAFE
        -:  810:    //! @protected @memberof QActive
        -:  811:    uint8_t pthre_dis;
        -:  812:#endif // ndef Q_UNSAFE
        -:  813:
        -:  814:// private:
        -:  815:} QActive;
        -:  816:
        -:  817://! @static @private @memberof QActive
        -:  818:extern QActive * QActive_registry_[QF_MAX_ACTIVE + 1U];
        -:  819:
        -:  820://! @static @private @memberof QActive
        -:  821:extern QSubscrList * QActive_subscrList_;
        -:  822:
        -:  823://! @static @private @memberof QActive
        -:  824:extern enum_t QActive_maxPubSignal_;
        -:  825:
        -:  826:// protected:
        -:  827:
        -:  828://! @protected @memberof QActive
        -:  829:void QActive_ctor(QActive * const me,
        -:  830:    QStateHandler const initial);
        -:  831:
        -:  832:// public:
        -:  833:
        -:  834://! @public @memberof QActive
        -:  835:void QActive_setAttr(QActive * const me,
        -:  836:    uint32_t attr1,
        -:  837:    void const * attr2);
        -:  838:
        -:  839://! @public @memberof QActive
        -:  840:void QActive_start(QActive * const me,
        -:  841:    QPrioSpec const prioSpec,
        -:  842:    QEvt const * * const qSto,
        -:  843:    uint_fast16_t const qLen,
        -:  844:    void * const stkSto,
        -:  845:    uint_fast16_t const stkSize,
        -:  846:    void const * const par);
        -:  847:
        -:  848:// protected:
        -:  849:
        -:  850:#ifdef QACTIVE_CAN_STOP
        -:  851://! @protected @memberof QActive
        -:  852:void QActive_stop(QActive * const me);
        -:  853:#endif // def QACTIVE_CAN_STOP
        -:  854:
        -:  855:// private:
        -:  856:
        -:  857://! @private @memberof QActive
        -:  858:void QActive_register_(QActive * const me);
        -:  859:
        -:  860://! @private @memberof QActive
        -:  861:void QActive_unregister_(QActive * const me);
        -:  862:
        -:  863://! @private @memberof QActive
        -:  864:bool QActive_post_(QActive * const me,
        -:  865:    QEvt const * const e,
        -:  866:    uint_fast16_t const margin,
        -:  867:    void const * const sender);
        -:  868:
        -:  869://! @private @memberof QActive
        -:  870:void QActive_postLIFO_(QActive * const me,
        -:  871:    QEvt const * const e);
        -:  872:
        -:  873://! @private @memberof QActive
        -:  874:QEvt const * QActive_get_(QActive * const me);
        -:  875:
        -:  876:// public:
        -:  877:
        -:  878://! @static @public @memberof QActive
        -:  879:void QActive_psInit(
        -:  880:    QSubscrList * const subscrSto,
        -:  881:    enum_t const maxSignal);
        -:  882:
        -:  883:// private:
        -:  884:
        -:  885://! @static @private @memberof QActive
        -:  886:void QActive_publish_(
        -:  887:    QEvt const * const e,
        -:  888:    void const * const sender,
        -:  889:    uint_fast8_t const qsId);
        -:  890:
        -:  891:// protected:
        -:  892:
        -:  893://! @protected @memberof QActive
        -:  894:void QActive_subscribe(QActive const * const me,
        -:  895:    enum_t const sig);
        -:  896:
        -:  897://! @protected @memberof QActive
        -:  898:void QActive_unsubscribe(QActive const * const me,
        -:  899:    enum_t const sig);
        -:  900:
        -:  901://! @protected @memberof QActive
        -:  902:void QActive_unsubscribeAll(QActive const * const me);
        -:  903:
        -:  904://! @protected @memberof QActive
        -:  905:bool QActive_defer(QActive const * const me,
        -:  906:    struct QEQueue * const eq,
        -:  907:    QEvt const * const e);
        -:  908:
        -:  909://! @protected @memberof QActive
        -:  910:bool QActive_recall(QActive * const me,
        -:  911:    struct QEQueue * const eq);
        -:  912:
        -:  913://! @protected @memberof QActive
        -:  914:uint_fast16_t QActive_flushDeferred(QActive const * const me,
        -:  915:    struct QEQueue * const eq,
        -:  916:    uint_fast16_t const num);
        -:  917:
        -:  918:// private:
        -:  919:
        -:  920://! @private @memberof QActive
        -:  921:void QActive_evtLoop_(QActive * const me);
        -:  922://$enddecl${QF::QActive} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        -:  923:
        -:  924://$declare${QF::QMActive} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
        -:  925:
        -:  926://${QF::QMActive} ............................................................
        -:  927://! @class QMActive
        -:  928://! @extends QActive
        -:  929:typedef struct {
        -:  930:// protected:
        -:  931:    QActive super;
        -:  932:} QMActive;
        -:  933:
        -:  934:// protected:
        -:  935:
        -:  936://! @protected @memberof QMActive
        -:  937:void QMActive_ctor(QMActive * const me,
        -:  938:    QStateHandler const initial);
        -:  939://$enddecl${QF::QMActive} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        -:  940:
        -:  941://$declare${QF::QTimeEvt} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
        -:  942:
        -:  943://${QF::QTimeEvt} ............................................................
        -:  944://! @class QTimeEvt
        -:  945://! @extends QEvt
        -:  946:typedef struct QTimeEvt {
        -:  947:// protected:
        -:  948:    QEvt super;
        -:  949:
        -:  950:// private:
        -:  951:
        -:  952:    //! @private @memberof QTimeEvt
        -:  953:    struct QTimeEvt * volatile next;
        -:  954:
        -:  955:    //! @private @memberof QTimeEvt
        -:  956:    void * volatile act;
        -:  957:
        -:  958:    //! @private @memberof QTimeEvt
        -:  959:    QTimeEvtCtr volatile ctr;
        -:  960:
        -:  961:    //! @private @memberof QTimeEvt
        -:  962:    QTimeEvtCtr interval;
        -:  963:} QTimeEvt;
        -:  964:
        -:  965://! @static @private @memberof QTimeEvt
        -:  966:extern QTimeEvt QTimeEvt_timeEvtHead_[QF_MAX_TICK_RATE];
        -:  967:
        -:  968:// public:
        -:  969:
        -:  970://! @public @memberof QTimeEvt
        -:  971:void QTimeEvt_ctorX(QTimeEvt * const me,
        -:  972:    QActive * const act,
        -:  973:    enum_t const sig,
        -:  974:    uint_fast8_t const tickRate);
        -:  975:
        -:  976://! @public @memberof QTimeEvt
        -:  977:void QTimeEvt_armX(QTimeEvt * const me,
        -:  978:    QTimeEvtCtr const nTicks,
        -:  979:    QTimeEvtCtr const interval);
        -:  980:
        -:  981://! @public @memberof QTimeEvt
        -:  982:bool QTimeEvt_disarm(QTimeEvt * const me);
        -:  983:
        -:  984://! @public @memberof QTimeEvt
        -:  985:bool QTimeEvt_rearm(QTimeEvt * const me,
        -:  986:    QTimeEvtCtr const nTicks);
        -:  987:
        -:  988://! @public @memberof QTimeEvt
        -:  989:bool QTimeEvt_wasDisarmed(QTimeEvt * const me);
        -:  990:
        -:  991://! @public @memberof QTimeEvt
        -:  992:QTimeEvtCtr QTimeEvt_currCtr(QTimeEvt const * const me);
        -:  993:
        -:  994://! @static @private @memberof QTimeEvt
        -:  995:void QTimeEvt_tick_(
        -:  996:    uint_fast8_t const tickRate,
        -:  997:    void const * const sender);
        -:  998:
        -:  999:// private:
        -: 1000:
        -: 1001:#ifdef Q_UTEST
        -: 1002://! @static @private @memberof QTimeEvt
        -: 1003:void QTimeEvt_tick1_(
        -: 1004:    uint_fast8_t const tickRate,
        -: 1005:    void const * const sender);
        -: 1006:#endif // def Q_UTEST
        -: 1007:
        -: 1008:// public:
        -: 1009:
        -: 1010://! @static @public @memberof QTimeEvt
        -: 1011:bool QTimeEvt_noActive(uint_fast8_t const tickRate);
        -: 1012://$enddecl${QF::QTimeEvt} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        -: 1013:
        -: 1014://$declare${QF::QTicker} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
        -: 1015:
        -: 1016://${QF::QTicker} .............................................................
        -: 1017://! @class QTicker
        -: 1018://! @extends QActive
        -: 1019:typedef struct {
        -: 1020:// protected:
        -: 1021:    QActive super;
        -: 1022:} QTicker;
        -: 1023:
        -: 1024:// public:
        -: 1025:
        -: 1026://! @public @memberof QTicker
        -: 1027:void QTicker_ctor(QTicker * const me,
        -: 1028:    uint_fast8_t const tickRate);
        -: 1029:
        -: 1030:// private:
        -: 1031:
        -: 1032://! @private @memberof QTicker
        -: 1033:void QTicker_init_(
        -: 1034:    QAsm * const me,
        -: 1035:    void const * const par,
        -: 1036:    uint_fast8_t const qsId);
        -: 1037:
        -: 1038://! @private @memberof QTicker
        -: 1039:void QTicker_dispatch_(
        -: 1040:    QAsm * const me,
        -: 1041:    QEvt const * const e,
        -: 1042:    uint_fast8_t const qsId);
        -: 1043:
        -: 1044://! @private @memberof QTicker
        -: 1045:void QTicker_trig_(
        -: 1046:    QActive * const me,
        -: 1047:    void const * const sender);
        -: 1048://$enddecl${QF::QTicker} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        -: 1049:
        -: 1050://$declare${QF::QF-base} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
        -: 1051:
        -: 1052://${QF::QF-base::init} .......................................................
        -: 1053://! @static @public @memberof QF
        -: 1054:void QF_init(void);
        -: 1055:
        -: 1056://${QF::QF-base::stop} .......................................................
        -: 1057://! @static @public @memberof QF
        -: 1058:void QF_stop(void);
        -: 1059:
        -: 1060://${QF::QF-base::run} ........................................................
        -: 1061://! @static @public @memberof QF
        -: 1062:int_t QF_run(void);
        -: 1063:
        -: 1064://${QF::QF-base::getQueueMin} ................................................
        -: 1065://! @static @public @memberof QF
        -: 1066:uint_fast16_t QF_getQueueMin(uint_fast8_t const prio);
        -: 1067:
        -: 1068://${QF::QF-base::onStartup} ..................................................
        -: 1069://! @static @public @memberof QF
        -: 1070:void QF_onStartup(void);
        -: 1071:
        -: 1072://${QF::QF-base::onCleanup} ..................................................
        -: 1073://! @static @public @memberof QF
        -: 1074:void QF_onCleanup(void);
        -: 1075:
        -: 1076://${QF::QF-base::onContextSw} ................................................
        -: 1077:#ifdef QF_ON_CONTEXT_SW
        -: 1078://! @static @public @memberof QF
        -: 1079:void QF_onContextSw(
        -: 1080:    QActive * prev,
        -: 1081:    QActive * next);
        -: 1082:#endif // def QF_ON_CONTEXT_SW
        -: 1083://$enddecl${QF::QF-base} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        -: 1084:
        -: 1085://$declare${QF::QF-dyn} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
        -: 1086:
        -: 1087://${QF::QF-dyn::poolInit} ....................................................
        -: 1088://! @static @public @memberof QF
        -: 1089:void QF_poolInit(
        -: 1090:    void * const poolSto,
        -: 1091:    uint_fast32_t const poolSize,
        -: 1092:    uint_fast16_t const evtSize);
        -: 1093:
        -: 1094://${QF::QF-dyn::poolGetMaxBlockSize} .........................................
        -: 1095://! @static @public @memberof QF
        -: 1096:uint_fast16_t QF_poolGetMaxBlockSize(void);
        -: 1097:
        -: 1098://${QF::QF-dyn::getPoolMin} ..................................................
        -: 1099://! @static @public @memberof QF
        -: 1100:uint_fast16_t QF_getPoolMin(uint_fast8_t const poolNum);
        -: 1101:
        -: 1102://${QF::QF-dyn::newX_} .......................................................
        -: 1103://! @static @private @memberof QF
        -: 1104:QEvt * QF_newX_(
        -: 1105:    uint_fast16_t const evtSize,
        -: 1106:    uint_fast16_t const margin,
        -: 1107:    enum_t const sig);
        -: 1108:
        -: 1109://${QF::QF-dyn::gc} ..........................................................
        -: 1110://! @static @public @memberof QF
        -: 1111:void QF_gc(QEvt const * const e);
        -: 1112:
        -: 1113://${QF::QF-dyn::newRef_} .....................................................
        -: 1114://! @static @private @memberof QF
        -: 1115:QEvt const * QF_newRef_(
        -: 1116:    QEvt const * const e,
        -: 1117:    void const * const evtRef);
        -: 1118:
        -: 1119://${QF::QF-dyn::deleteRef_} ..................................................
        -: 1120://! @static @private @memberof QF
        -: 1121:void QF_deleteRef_(void const * const evtRef);
        -: 1122:
        -: 1123://${QF::QF-dyn::gcFromISR} ...................................................
        -: 1124://! @static @public @memberof QF
        -: 1125:void QF_gcFromISR(QEvt const * const e);
        -: 1126://$enddecl${QF::QF-dyn} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        -: 1127:
        -: 1128://$declare${QF-macros} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
        -: 1129:
        -: 1130://${QF-macros::QF_NO_MARGIN} .................................................
        -: 1131:#define QF_NO_MARGIN ((uint_fast16_t)0xFFFFU)
        -: 1132:
        -: 1133://${QF-macros::Q_PRIO} .......................................................
        -: 1134:#define Q_PRIO(prio_, pthre_) ((QPrioSpec)((prio_) | ((pthre_) << 8U)))
        -: 1135:
        -: 1136://${QF-macros::Q_NEW} ........................................................
        -: 1137:#ifndef QEVT_PAR_INIT
        -: 1138:#define Q_NEW(evtT_, sig_) ((evtT_ *)QF_newX_((uint_fast16_t)sizeof(evtT_), \
        -: 1139:                           QF_NO_MARGIN, (enum_t)(sig_)))
        -: 1140:#endif // ndef QEVT_PAR_INIT
        -: 1141:
        -: 1142://${QF-macros::Q_NEW} ........................................................
        -: 1143:#ifdef QEVT_PAR_INIT
        -: 1144:#define Q_NEW(evtT_, sig_, ...) \
        -: 1145:    (evtT_##_init((evtT_ *)QF_newX_((uint_fast16_t)sizeof(evtT_), \
        -: 1146:                  QF_NO_MARGIN, (sig_)), __VA_ARGS__))
        -: 1147:#endif // def QEVT_PAR_INIT
        -: 1148:
        -: 1149://${QF-macros::Q_NEW_X} ......................................................
        -: 1150:#ifndef QEVT_PAR_INIT
        -: 1151:#define Q_NEW_X(evtT_, margin_, sig_) \
        -: 1152:    ((evtT_ *)QF_newX_((uint_fast16_t)sizeof(evtT_), \
        -: 1153:                      (margin_), (enum_t)(sig_)))
        -: 1154:#endif // ndef QEVT_PAR_INIT
        -: 1155:
        -: 1156://${QF-macros::Q_NEW_X} ......................................................
        -: 1157:#ifdef QEVT_PAR_INIT
        -: 1158:#define Q_NEW_X(evtT_, margin_, sig_, ...) \
        -: 1159:    (evtT_##_init((evtT_ *)QF_newX_((uint_fast16_t)sizeof(evtT_), \
        -: 1160:                  (margin_), (sig_)), __VA_ARGS__))
        -: 1161:#endif // def QEVT_PAR_INIT
        -: 1162:
        -: 1163://${QF-macros::Q_NEW_REF} ....................................................
        -: 1164:#define Q_NEW_REF(evtRef_, evtT_) \
        -: 1165:    ((evtRef_) = (evtT_ const *)QF_newRef_(e, (evtRef_)))
        -: 1166:
        -: 1167://${QF-macros::Q_DELETE_REF} .................................................
        -: 1168:#define Q_DELETE_REF(evtRef_) do { \
        -: 1169:    QF_deleteRef_((evtRef_)); \
        -: 1170:    (evtRef_) = (void *)0; \
        -: 1171:} while (false)
        -: 1172:
        -: 1173://${QF-macros::QACTIVE_POST} .................................................
        -: 1174:#ifdef Q_SPY
        -: 1175:#define QACTIVE_POST(me_, e_, sender_) \
        -: 1176:    ((void)QActive_post_((me_), (e_), QF_NO_MARGIN, (sender_)))
        -: 1177:#endif // def Q_SPY
        -: 1178:
        -: 1179://${QF-macros::QACTIVE_POST} .................................................
        -: 1180:#ifndef Q_SPY
        -: 1181:#define QACTIVE_POST(me_, e_, dummy) \
        -: 1182:    ((void)QActive_post_((me_), (e_), QF_NO_MARGIN, (void *)0))
        -: 1183:#endif // ndef Q_SPY
        -: 1184:
        -: 1185://${QF-macros::QACTIVE_POST_X} ...............................................
        -: 1186:#ifdef Q_SPY
        -: 1187:#define QACTIVE_POST_X(me_, e_, margin_, sender_) \
        -: 1188:    (QActive_post_((me_), (e_), (margin_), (sender_)))
        -: 1189:#endif // def Q_SPY
        -: 1190:
        -: 1191://${QF-macros::QACTIVE_POST_X} ...............................................
        -: 1192:#ifndef Q_SPY
        -: 1193:#define QACTIVE_POST_X(me_, e_, margin_, dummy) \
        -: 1194:    (QActive_post_((me_), (e_), (margin_), (void *)0))
        -: 1195:#endif // ndef Q_SPY
        -: 1196:
        -: 1197://${QF-macros::QACTIVE_POST_LIFO} ............................................
        -: 1198:#define QACTIVE_POST_LIFO(me_, e_) \
        -: 1199:    (QActive_postLIFO_((me_), (e_)))
        -: 1200:
        -: 1201://${QF-macros::QACTIVE_PUBLISH} ..............................................
        -: 1202:#ifdef Q_SPY
        -: 1203:#define QACTIVE_PUBLISH(e_, sender_) \
        -: 1204:    (QActive_publish_((e_), (void const *)(sender_), (sender_)->prio))
        -: 1205:#endif // def Q_SPY
        -: 1206:
        -: 1207://${QF-macros::QACTIVE_PUBLISH} ..............................................
        -: 1208:#ifndef Q_SPY
        -: 1209:#define QACTIVE_PUBLISH(e_, dummy) (QActive_publish_((e_), (void *)0, 0U))
        -: 1210:#endif // ndef Q_SPY
        -: 1211:
        -: 1212://${QF-macros::QTIMEEVT_TICK_X} ..............................................
        -: 1213:#ifdef Q_SPY
        -: 1214:#define QTIMEEVT_TICK_X(tickRate_, sender_) (QTimeEvt_tick_((tickRate_), (sender_)))
        -: 1215:#endif // def Q_SPY
        -: 1216:
        -: 1217://${QF-macros::QTIMEEVT_TICK_X} ..............................................
        -: 1218:#ifndef Q_SPY
        -: 1219:#define QTIMEEVT_TICK_X(tickRate_, dummy) (QTimeEvt_tick_((tickRate_), (void *)0))
        -: 1220:#endif // ndef Q_SPY
        -: 1221:
        -: 1222://${QF-macros::QTIMEEVT_TICK} ................................................
        -: 1223:#define QTIMEEVT_TICK(sender_) QTIMEEVT_TICK_X(0U, (sender_))
        -: 1224:
        -: 1225://${QF-macros::QTICKER_TRIG} .................................................
        -: 1226:#ifdef Q_SPY
        -: 1227:#define QTICKER_TRIG(ticker_, sender_) (QTicker_trig_((ticker_), (sender_)))
        -: 1228:#endif // def Q_SPY
        -: 1229:
        -: 1230://${QF-macros::QTICKER_TRIG} .................................................
        -: 1231:#ifndef Q_SPY
        -: 1232:#define QTICKER_TRIG(ticker_, sender_) (QTicker_trig_((ticker_), (void *)0))
        -: 1233:#endif // ndef Q_SPY
        -: 1234:
        -: 1235://${QF-macros::QF_CRIT_EXIT_NOP} .............................................
        -: 1236:#ifndef QF_CRIT_EXIT_NOP
        -: 1237:#define QF_CRIT_EXIT_NOP() ((void)0)
        -: 1238:#endif // ndef QF_CRIT_EXIT_NOP
        -: 1239:
        -: 1240://${QF-macros::QF_TICK_X} ....................................................
        -: 1241:#define QF_TICK_X(tickRate_, sender_) QTIMEEVT_TICK_X((tickRate_), (sender_))
        -: 1242:
        -: 1243://${QF-macros::QF_TICK} ......................................................
        -: 1244:#define QF_TICK(sender_) QTIMEEVT_TICK(sender_)
        -: 1245:
        -: 1246://${QF-macros::QF_PUBLISH} ...................................................
        -: 1247:#define QF_PUBLISH(e_, sender_) QACTIVE_PUBLISH((e_), (sender_))
        -: 1248:
        -: 1249://${QF-macros::QF_MEM_SYS} ...................................................
        -: 1250:#ifndef QF_MEM_SYS
        -: 1251:#define QF_MEM_SYS() ((void)0)
        -: 1252:#endif // ndef QF_MEM_SYS
        -: 1253:
        -: 1254://${QF-macros::QF_MEM_APP} ...................................................
        -: 1255:#ifndef QF_MEM_APP
        -: 1256:#define QF_MEM_APP() ((void)0)
        -: 1257:#endif // ndef QF_MEM_APP
        -: 1258://$enddecl${QF-macros} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        -: 1259:
        -: 1260:#endif // QP_H_
