<?xml version="1.0" encoding="UTF-8"?>
<model version="7.0.0" links="1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.state-machine.com/qm/qm7.xsd">
 <documentation>Blinky example</documentation>
 <!--${qpc}-->
 <framework name="qpc">
  <license name="LicenseRef-QL-dual">public
qpc
2025-12-31
Copyright (C) 2005 Quantum Leaps, LLC. All rights reserved.

                   Q u a n t u m  L e a P s
                   ------------------------
                   Modern Embedded Software

SPDX-License-Identifier: GPL-3.0-or-later OR LicenseRef-QL-commercial

The QP/C software is dual-licensed under the terms of the open-source GNU
General Public License (GPL) or under the terms of one of the closed-
source Quantum Leaps commercial licenses.

Redistributions in source code must retain this top-level comment block.
Plagiarizing this software to sidestep the license obligations is illegal.

NOTE:
The GPL does NOT permit the incorporation of this code into proprietary
programs. Please contact Quantum Leaps for commercial licensing options,
which expressly supersede the GPL and are designed explicitly for
closed-source distribution.

Quantum Leaps contact information:
&lt;www.state-machine.com/licensing&gt;
&lt;info@state-machine.com&gt;
#2BACD81DCE8ED122C193E4F48A14170D660DFF1E</license>
 </framework>
 <!--${AOs}-->
 <package name="AOs" stereotype="0x02">
  <!--${AOs::Blinky}-->
  <class name="Blinky" superclass="qpc::QActive">
   <!--${AOs::Blinky::timeEvt}-->
   <attribute name="timeEvt" type="QTimeEvt" visibility="0x02" properties="0x00"/>
   <!--${AOs::Blinky::SM}-->
   <statechart properties="0x03">
    <!--${AOs::Blinky::SM::initial}-->
    <initial target="../1">
     <action>(void)par; // unused parameter

QS_OBJ_DICTIONARY(&amp;l_blinky);
QS_OBJ_DICTIONARY(&amp;l_blinky.timeEvt);

QTimeEvt_armX(&amp;me-&gt;timeEvt,
    BSP_TICKS_PER_SEC/2, BSP_TICKS_PER_SEC/2);</action>
     <initial_glyph conn="2,3,5,1,20,4,-4">
      <action box="0,-2,6,2"/>
     </initial_glyph>
    </initial>
    <!--${AOs::Blinky::SM::off}-->
    <state name="off">
     <entry>BSP_ledOff();</entry>
     <!--${AOs::Blinky::SM::off::TIMEOUT}-->
     <tran trig="TIMEOUT" target="../../2">
      <tran_glyph conn="2,13,3,1,18,6,-2">
       <action box="0,-2,8,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="2,5,16,10">
      <entry box="0,3,12,4"/>
     </state_glyph>
    </state>
    <!--${AOs::Blinky::SM::on}-->
    <state name="on">
     <entry>BSP_ledOn();</entry>
     <!--${AOs::Blinky::SM::on::TIMEOUT}-->
     <tran trig="TIMEOUT" target="../../1">
      <tran_glyph conn="2,25,3,1,20,-15,-4">
       <action box="0,-2,8,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="2,17,16,10">
      <entry box="0,3,12,4"/>
     </state_glyph>
    </state>
    <state_diagram size="30,29"/>
   </statechart>
  </class>
  <!--${AOs::AO_Blinky}-->
  <attribute name="AO_Blinky" type="QActive * const" visibility="0x00" properties="0x00">
   <documentation>// opaque pointer to the Blinky AO</documentation>
   <code>= &amp;l_blinky.super;</code>
  </attribute>
  <!--${AOs::Blinky_ctor}-->
  <operation name="Blinky_ctor" type="void" visibility="0x00" properties="0x00">
   <code>Blinky *me = &amp;l_blinky;
QActive_ctor(&amp;me-&gt;super, Q_STATE_CAST(&amp;Blinky_initial));
QTimeEvt_ctorX(&amp;me-&gt;timeEvt, &amp;me-&gt;super, TIMEOUT_SIG, 0U);</code>
  </operation>
 </package>
 <!--${.}-->
 <directory name=".">
  <!--${.::blinky.h}-->
  <file name="blinky.h">
   <text>#ifndef BLINKY_H
#define BLINKY_H

enum BlinkySignals {
    DUMMY_SIG = Q_USER_SIG,
    MAX_PUB_SIG,          // the last published signal

    TIMEOUT_SIG,
    MAX_SIG               // the last signal
};

$declare${AOs::Blinky_ctor}

$declare${AOs::AO_Blinky}

#endif // BLINKY_H
</text>
  </file>
  <!--${.::blinky.c}-->
  <file name="blinky.c">
   <text>#include &quot;qpc.h&quot;
#include &quot;blinky.h&quot;
#include &quot;bsp.h&quot;

//Q_DEFINE_THIS_MODULE(&quot;blinky&quot;)

// ask QM to declare the Blinky class...
$declare ${AOs::Blinky}

static Blinky l_blinky;

$define ${AOs::AO_Blinky}

// ask QM to define the Blinky class...
$define ${AOs::Blinky_ctor}
$define ${AOs::Blinky}</text>
  </file>
 </directory>
</model>
