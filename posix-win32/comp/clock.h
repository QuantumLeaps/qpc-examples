//$file${.::clock.h} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
//
// Model: comp.qm
// File:  ${.::clock.h}
//
// This code has been generated by QM 7.0.1 <www.state-machine.com/qm>.
// DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
//
// Copyright (c) 2005 Quantum Leaps, LLC. All rights reserved.
//
//                 ____________________________________
//                /                                   /
//               /    GGGGGGG    PPPPPPPP   LL       /
//              /   GG     GG   PP     PP  LL       /
//             /   GG          PP     PP  LL       /
//            /   GG   GGGGG  PPPPPPPP   LL       /
//           /   GG      GG  PP         LL       /
//          /     GGGGGGG   PP         LLLLLLL  /
//         /___________________________________/
//
// SPDX-License-Identifier: GPL-3.0-or-later
//
// This generated code is open-source software licensed under the GNU
// General Public License (GPL) as published by the Free Software Foundation
// (see <https://www.gnu.org/licenses>).
//
// NOTE:
// The GPL does NOT permit the incorporation of this code into proprietary
// programs. Please contact Quantum Leaps for commercial licensing options,
// which expressly supersede the GPL and are designed explicitly for
// closed-source distribution.
//
// Quantum Leaps contact information:
// <www.state-machine.com/licensing>
// <info@state-machine.com>
//
//$endhead${.::clock.h} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#ifndef CLOCK_H_
#define CLOCK_H_

enum AlarmClockSignals {
    TICK_SIG = Q_USER_SIG, // time tick event
    ALARM_SET_SIG,  // set the alarm
    ALARM_ON_SIG,   // turn the alarm on
    ALARM_OFF_SIG,  // turn the alarm off
    ALARM_SIG,  // alarm event from Alarm component to AlarmClock container
    CLOCK_12H_SIG,  // set the clock in 12H mode
    CLOCK_24H_SIG,  // set the clock in 24H mode
    TIME_SIG,       // time event sent to Alarm (contains current time)
    TERMINATE_SIG   // terminate the application
};

//$declare${Events::SetEvt} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

//${Events::SetEvt} ..........................................................
typedef struct {
// protected:
    QEvt super;

// public:
    uint8_t digit;
} SetEvt;
//$enddecl${Events::SetEvt} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//$declare${Events::TimeEvt} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

//${Events::TimeEvt} .........................................................
typedef struct {
// protected:
    QEvt super;

// public:
    uint32_t current_time;
} TimeEvt;
//$enddecl${Events::TimeEvt} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

//$declare${Components::APP_alarmClock} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

//${Components::APP_alarmClock} ..............................................
extern QActive * const APP_alarmClock;
//$enddecl${Components::APP_alarmClock} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//$declare${Components::AlarmClock_ctor} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

//${Components::AlarmClock_ctor} .............................................
void AlarmClock_ctor(void);
//$enddecl${Components::AlarmClock_ctor} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

#endif // CLOCK_H_
